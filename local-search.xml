<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hexo Blog CI by GitHub Action</title>
    <link href="/2023/07/13/2023-07-13-Hexo_Blog_CI_by_GitHub_Action/"/>
    <url>/2023/07/13/2023-07-13-Hexo_Blog_CI_by_GitHub_Action/</url>
    
    <content type="html"><![CDATA[<p>本地修改代码提交Github时自动触发Hexo代码更新</p><p>静态博客简单，但是发布博文时稍显麻烦，一般需要下面两步：</p><h2><span id="github-action-hexo-ci-cd">GitHub Action - Hexo CI/CD</span><a href="#github-action-hexo-ci-cd" class="header-anchor"></a></h2><h3><span id="bu-zou-yi-wei-cang-ku-she-zhi-fang-wen-mi-yao">步骤一：为仓库设置访问密钥</span><a href="#bu-zou-yi-wei-cang-ku-she-zhi-fang-wen-mi-yao" class="header-anchor"></a></h3><ol><li>生成密钥</li></ol><p>打开命令行并生成一组密钥</p><pre><code class="hljs lsl">ssh-keygen -f github-deploy-<span class="hljs-type">key</span> -C <span class="hljs-string">&quot;HEXO CD&quot;</span></code></pre><p>记得跳过密码啥的，这里连按回车就好</p><p>您将获得 2 个文件：</p><pre><code class="hljs lsl">github-deploy-<span class="hljs-type">key</span>.pub    是公钥github-deploy-<span class="hljs-type">key</span>    是私钥</code></pre><ol start="2"><li>上传公钥：</li></ol><p><strong>博客源码</strong>存储库(<a href="https://github.com/zhenzhang20/zhenzhang20.github.io">https://github.com/zhenzhang20/zhenzhang20.github.io</a>) 中进行设置，转到Deploy Keys并使用Allow write access添加您的公钥 github-deploy-key.pub，name写为HEXO_DEPLOY_PUB，指定用途，方便后面维护，内容为 github-deploy-key.pub文件内的所有内容。记得勾选允许写入权限</p><img src="/2023/07/13/2023-07-13-Hexo_Blog_CI_by_GitHub_Action/2023-07-13-GithubPages_Deploy_Keys_BeforeAdd.png" class title="image"><img src="/2023/07/13/2023-07-13-Hexo_Blog_CI_by_GitHub_Action/2023-07-13-GithubPages_Deploy_Keys_Add.png" class title="image"><img src="/2023/07/13/2023-07-13-Hexo_Blog_CI_by_GitHub_Action/2023-07-13-GithubPages_Deploy_Keys_FinishAdd.png" class title="image"><ol start="3"><li>上传私钥：</li></ol><p>转到<strong>源码</strong>存储库(<a href="https://github.com/zhenzhang20/blog">https://github.com/zhenzhang20/blog</a>) 中进行设置，github blog仓库地址 → Settings → Secrets and variables → action  → New repository secret，name写为HEXO_DEPLOY_PRI，内容为 github-deploy-key文件内的所有内容</p><img src="/2023/07/13/2023-07-13-Hexo_Blog_CI_by_GitHub_Action/2023-07-13-BlogSource_Deploy_Keys_BeforeAdd.png" class title="image"><img src="/2023/07/13/2023-07-13-Hexo_Blog_CI_by_GitHub_Action/2023-07-13-BlogSource_Deploy_Keys_Add.png" class title="image"><img src="/2023/07/13/2023-07-13-Hexo_Blog_CI_by_GitHub_Action/2023-07-13-BlogSource_Deploy_Keys_FinishAdd.png" class title="image"><ol start="4"><li>如果在github上删除了已经上传的密钥，则需要重新生产新的密钥进行上传。</li></ol><p><strong>不要轻易透露你的私钥</strong></p><h3><span id="bu-zou-er-pei-zhi-github-workflows">步骤二：配置Github Workflows</span><a href="#bu-zou-er-pei-zhi-github-workflows" class="header-anchor"></a></h3><p>配置github action</p><p>在本地 blog 根目录下创建 .github/workflows/deploy.yml 文件，目录结构如下</p><pre><code class="hljs css"><span class="hljs-selector-tag">blog</span> (<span class="hljs-selector-tag">repository</span>)  └── <span class="hljs-selector-class">.github</span>  └── <span class="hljs-selector-tag">workflows</span>  └── <span class="hljs-selector-tag">deploy</span><span class="hljs-selector-class">.yml</span></code></pre><p>deploy.yml 的内容如下</p><pre><code class="hljs yaml"><span class="hljs-comment"># workflow name</span><span class="hljs-attr">name:</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Blog</span> <span class="hljs-string">CI</span><span class="hljs-comment"># main branch on push, auto run</span><span class="hljs-attr">on:</span>   <span class="hljs-attr">push:</span>    <span class="hljs-attr">branches:</span>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><span class="hljs-attr">jobs:</span>  <span class="hljs-attr">build:</span>     <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span>     <span class="hljs-attr">steps:</span>    <span class="hljs-comment"># check it to your workflow can access it</span>    <span class="hljs-comment"># from: https://github.com/actions/checkout</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">Repository</span> <span class="hljs-string">main</span> <span class="hljs-string">branch</span>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@main</span>     <span class="hljs-comment"># from: https://github.com/actions/setup-node  </span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Node.js</span> <span class="hljs-number">12.</span><span class="hljs-string">x</span>       <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@main</span>      <span class="hljs-attr">with:</span>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&quot;12.x&quot;</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Hexo</span> <span class="hljs-string">Dependencies</span>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>        <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">hexo-cli</span> <span class="hljs-string">-g</span>        <span class="hljs-string">npm</span> <span class="hljs-string">install</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Private</span> <span class="hljs-string">Key</span>      <span class="hljs-attr">env:</span>        <span class="hljs-attr">HEXO_DEPLOY_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.HEXO_DEPLOY_PRIVATE_KEY</span> <span class="hljs-string">&#125;&#125;</span>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>        <span class="hljs-string">mkdir</span> <span class="hljs-string">-p</span> <span class="hljs-string">~/.ssh/</span>        <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$HEXO_DEPLOY_PRIVATE_KEY&quot;</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">~/.ssh/id_rsa</span>         <span class="hljs-string">chmod</span> <span class="hljs-number">600</span> <span class="hljs-string">~/.ssh/id_rsa</span>        <span class="hljs-string">ssh-keyscan</span> <span class="hljs-string">github.com</span> <span class="hljs-string">&gt;&gt;</span> <span class="hljs-string">~/.ssh/known_hosts</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Setup</span> <span class="hljs-string">Git</span> <span class="hljs-string">Infomation</span>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>         <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.name</span> <span class="hljs-string">&#x27;zhen_zhang20&#x27;</span>         <span class="hljs-string">git</span> <span class="hljs-string">config</span> <span class="hljs-string">--global</span> <span class="hljs-string">user.email</span> <span class="hljs-string">&#x27;zhen_zhang20@163.com&#x27;</span>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">Hexo</span>       <span class="hljs-attr">run:</span> <span class="hljs-string">|</span>        <span class="hljs-string">hexo</span> <span class="hljs-string">clean</span>        <span class="hljs-string">hexo</span> <span class="hljs-string">generate</span>         <span class="hljs-string">hexo</span> <span class="hljs-string">deploy</span></code></pre><ul><li>可能遇到报错：<pre><code class="hljs crystal">INFO  Copying files from <span class="hljs-keyword">extend</span> dirs...<span class="hljs-symbol">fatal:</span> in unpopulated submodule <span class="hljs-string">&#x27;.deploy_git&#x27;</span>FATAL &#123;<span class="hljs-symbol">err:</span> <span class="hljs-symbol">Error:</span> Spawn failed    at ChildProcess.&lt;anonymous&gt; (<span class="hljs-regexp">/home/runner</span><span class="hljs-regexp">/work/blog</span><span class="hljs-regexp">/blog/node</span>_modules/hexo-deployer-git/node_modules/hexo-util/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">spawn</span>.<span class="hljs-title">js</span>:51:21)</span>    at ChildProcess.emit (events.<span class="hljs-symbol">js:</span><span class="hljs-number">314</span>:<span class="hljs-number">20</span>)    at Process.ChildProcess._handle.onexit (internal/child_process.<span class="hljs-symbol">js:</span><span class="hljs-number">276</span>:<span class="hljs-number">12</span>) &#123;  <span class="hljs-symbol">code:</span> <span class="hljs-number">128</span>&#125;&#125; Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><span class="hljs-string">Error: Process completed with exit code 2.</span></code></pre></li></ul><pre><code class="hljs crystal">INFO  Copying files from <span class="hljs-keyword">extend</span> dirs...<span class="hljs-symbol">fatal:</span> in unpopulated submodule <span class="hljs-string">&#x27;.deploy_git&#x27;</span>FATAL &#123;  <span class="hljs-symbol">err:</span> <span class="hljs-symbol">Error:</span> Spawn failed      at ChildProcess.&lt;anonymous&gt; (<span class="hljs-regexp">/home/runner</span><span class="hljs-regexp">/work/blog</span><span class="hljs-regexp">/blog/node</span>_modules/hexo-deployer-git/node_modules/hexo-util/<span class="hljs-class"><span class="hljs-keyword">lib</span>/<span class="hljs-title">spawn</span>.<span class="hljs-title">js</span>:51:21)</span>      at ChildProcess.emit (events.<span class="hljs-symbol">js:</span><span class="hljs-number">314</span>:<span class="hljs-number">20</span>)      at Process.ChildProcess._handle.onexit (internal/child_process.<span class="hljs-symbol">js:</span><span class="hljs-number">276</span>:<span class="hljs-number">12</span>) &#123;    <span class="hljs-symbol">code:</span> <span class="hljs-number">128</span>  &#125;&#125; Something<span class="hljs-string">&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><span class="hljs-string">Error: Process completed with exit code 2.</span></code></pre><p>解决方法：可能是没有权限进行 <em>删除/更新 “.deploy_git”</em>。增加“rm -rf .deploy_git” 来解决。</p><pre><code class="hljs properties"><span class="hljs-meta">-</span> <span class="hljs-string">name: Deploy Hexo </span>  <span class="hljs-attr">run</span>: <span class="hljs-string">|</span>    <span class="hljs-attr">rm</span> <span class="hljs-string">-rf .deploy_git</span>    <span class="hljs-attr">hexo</span> <span class="hljs-string">clean</span>    <span class="hljs-attr">hexo</span> <span class="hljs-string">generate </span>    <span class="hljs-attr">hexo</span> <span class="hljs-string">deploy</span></code></pre><ul><li>可能遇到报错：<pre><code class="hljs properties"><span class="hljs-attr">To</span> <span class="hljs-string">github.com:zhenzhang20/zhenzhang20.github.io.git</span><span class="hljs-meta">+</span> <span class="hljs-string">78f5aeb...8311e98 HEAD -&gt; main (forced update)</span><span class="hljs-attr">branch</span> <span class="hljs-string">&#x27;master&#x27; set up to track &#x27;git@github.com:zhenzhang20/zhenzhang20.github.io.git/main&#x27;.</span><span class="hljs-attr">On</span> <span class="hljs-string">branch master</span><span class="hljs-attr">nothing</span> <span class="hljs-string">to commit, working tree clean</span><span class="hljs-attr">Host</span> <span class="hljs-string">key verification failed.</span><span class="hljs-attr">fatal</span>: <span class="hljs-string">Could not read from remote repository.</span><span class="hljs-attr">Please</span> <span class="hljs-string">make sure you have the correct access rights</span><span class="hljs-attr">and</span> <span class="hljs-string">the repository exists.</span><span class="hljs-attr">FATAL</span> <span class="hljs-string">&#123;</span><span class="hljs-attr">err</span>: <span class="hljs-string">Error: Spawn failed</span>    <span class="hljs-attr">at</span> <span class="hljs-string">ChildProcess.&lt;anonymous&gt; (/home/runner/work/blog/blog/node_modules/hexo-deployer-git/node_modules/hexo-util/lib/spawn.js:51:21)</span>    <span class="hljs-attr">at</span> <span class="hljs-string">ChildProcess.emit (events.js:314:20)</span>    <span class="hljs-attr">at</span> <span class="hljs-string">Process.ChildProcess._handle.onexit (internal/child_process.js:276:12) &#123;</span>  <span class="hljs-attr">code</span>: <span class="hljs-string">128</span><span class="hljs-attr">&#125;</span><span class="hljs-meta">&#125;</span> <span class="hljs-string">Something&#x27;s wrong. Maybe you can find the solution here: %s https://hexo.io/docs/troubleshooting.html</span><span class="hljs-attr">Error</span>: <span class="hljs-string">Process completed with exit code 2.</span></code></pre></li></ul><p>解决方法：先主动提交一次 <strong>博客源码</strong>，之后再用持续集成方式提交</p><!--  --><h3><span id="bu-zou-san-ti-jiao-blog-dai-ma">步骤三：提交Blog代码</span><a href="#bu-zou-san-ti-jiao-blog-dai-ma" class="header-anchor"></a></h3><p>在Git Bash下，转到本地 blog 目录，运行下述命令提交代码</p><pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> .</span>git commit -m <span class="hljs-string">&#x27;initial&#x27;</span>git push origin main</code></pre><p>提交后，检查<a href="https://github.com/zhenzhang20/blog/">github.com/zhenzhang20/blog</a>仓库是否被更新，同时检查blog下的<a href="https://github.com/zhenzhang20/blog/actions/">action</a> 是否有正常运行，再检查<a href="https://github.com/zhenzhang20/zhenzhang20.github.io">博客仓库</a>是否被自动更新</p>]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github Action</tag>
      
      <tag>Github，持续集成，Hexo Blog CI</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>GitHub Clone and Push</title>
    <link href="/2023/07/10/2023-07-10-GitHub-Clone-Push/"/>
    <url>/2023/07/10/2023-07-10-GitHub-Clone-Push/</url>
    
    <content type="html"><![CDATA[<p>GitHub Clone and Push</p><h2><span id="zai-github-chuang-jian-si-you-cang-ku-blog">在Github创建私有仓库“blog”</span><a href="#zai-github-chuang-jian-si-you-cang-ku-blog" class="header-anchor"></a></h2><p>*登陆Github后，直接点New repository来创建一个新的私有仓库，比如：我创建了一个blog的仓库。</p><img src="/2023/07/10/2023-07-10-GitHub-Clone-Push/2023-07-10-Create_Blog_Repository_On_Github.png" class title="image"><h2><span id="clone-dai-ma-dao-ben-di-dian-nao">clone代码到本地电脑</span><a href="#clone-dai-ma-dao-ben-di-dian-nao" class="header-anchor"></a></h2><p>在本地电脑，打开Git命令行，进入希望放置blog的目录，运行“git clone <a href="mailto:&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#117;&#98;&#x2e;&#x63;&#111;&#x6d;</a>:zhenzhang20/blog.git” 来clone代码到本地。其中clone的地址可以在仓库中看到：</p><img src="/2023/07/10/2023-07-10-GitHub-Clone-Push/2023-07-10-Github_Clone_Link.png" class title="image"><ul><li>过程中可能遇到报错：</li></ul><pre><code class="hljs routeros">zz@Zhen MINGW64 /d/develop/www$ git clone git@github.com:zhenzhang20/blog.gitCloning into <span class="hljs-string">&#x27;blog&#x27;</span><span class="hljs-built_in">..</span>.ssh: connect <span class="hljs-keyword">to</span> host github.com<span class="hljs-built_in"> port </span>22:<span class="hljs-built_in"> Connection </span>refusedfatal: Could <span class="hljs-keyword">not</span> read <span class="hljs-keyword">from</span> remote repository.Please make sure you have the correct access rights<span class="hljs-keyword">and</span> the repository exists.</code></pre><ul><li>遇到22端口报错，可能是网络原因，先运行“ssh -T -p 22 <a href="mailto:&#x67;&#105;&#116;&#x40;&#x73;&#x73;&#104;&#x2e;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;">&#x67;&#105;&#116;&#x40;&#x73;&#x73;&#104;&#x2e;&#103;&#x69;&#x74;&#104;&#x75;&#98;&#46;&#99;&#x6f;&#x6d;</a>”检查22端口是否可以使用（默认是22端口，则可以使用“ssh -T <a href="mailto:&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;">&#103;&#x69;&#x74;&#x40;&#103;&#x69;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#111;&#x6d;</a>”）：<pre><code class="hljs routeros">$ ssh -T git@github.comssh: connect <span class="hljs-keyword">to</span> host github.com<span class="hljs-built_in"> port </span>22:<span class="hljs-built_in"> Connection </span>refused</code></pre><!--<img src="/2023/07/10/2023-07-10-GitHub-Clone-Push/2023-07-10-SSH_GitHub_Refuse_Port22.png" class="" title="image"> --></li></ul><ul><li><p>如果22端口报“Connection refused”，则可以尝试修改使用433端口，依旧先检查433端口是否可以使用，运行“ ssh -T -p 443 <a href="mailto:&#x67;&#105;&#116;&#x40;&#x73;&#115;&#x68;&#x2e;&#103;&#105;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;">&#x67;&#105;&#116;&#x40;&#x73;&#115;&#x68;&#x2e;&#103;&#105;&#x74;&#104;&#x75;&#98;&#46;&#x63;&#x6f;&#x6d;</a>” 检查433端口是否可用：</p><pre><code class="hljs inform7">zz@Zhen MINGW64 /$ ssh -T -p 443 git@ssh.github.comThe authenticity <span class="hljs-keyword">of</span> host &#x27;<span class="hljs-comment">[ssh.github.com]</span>:443 (<span class="hljs-comment">[20.205.243.160]</span>:443)&#x27; can&#x27;t be established.ED25519 key fingerprint <span class="hljs-keyword">is</span> SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.This host key <span class="hljs-keyword">is</span> known by the following other names/addresses:  ~/.ssh/known_hosts:1: github.com<span class="hljs-keyword">Are</span> you sure you want to continue connecting (yes/no/<span class="hljs-comment">[fingerprint]</span>)?</code></pre><!--<img src="/2023/07/10/2023-07-10-GitHub-Clone-Push/2023-07-10-SSH_GitHub_Check_Port433.png" class="" title="image"> --></li><li><p>若433端口可用，则在.ssh 目录创建文件：config，并编辑：~/.ssh/config, 文件内容为：</p><pre><code class="hljs routeros">Host github.comHostname ssh.github.com<span class="hljs-built_in"> Port </span>443</code></pre></li><li><p>遇到“Failed to connect to <strong>**</strong> after 2243 ms: Couldn’t connect to server”报错一般为网络问题，需要检查是否能正常访问Github：</p><pre><code class="hljs vim">zz@Zhen MINGW64 /d/develop/www$ git clone &lt;http<span class="hljs-variable">s:</span>//github.<span class="hljs-keyword">com</span>/zhenzhang20/blog.git&gt;Cloning into <span class="hljs-string">&#x27;blog&#x27;</span>...fata<span class="hljs-variable">l:</span> unable <span class="hljs-keyword">to</span> access <span class="hljs-string">&#x27;&lt;https://github.com/zhenzhang20/blog.git/&gt;&#x27;</span>: Failed <span class="hljs-keyword">to</span> connect <span class="hljs-keyword">to</span> github.<span class="hljs-keyword">com</span> port <span class="hljs-number">443</span> after <span class="hljs-number">2243</span> <span class="hljs-keyword">m</span><span class="hljs-variable">s:</span> Couldn<span class="hljs-string">&#x27;t connect to server</span></code></pre></li></ul><ul><li><p>再次运行“ssh -T <a href="mailto:&#103;&#105;&#x74;&#64;&#103;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#99;&#111;&#109;">&#103;&#105;&#x74;&#64;&#103;&#105;&#116;&#x68;&#117;&#98;&#x2e;&#99;&#111;&#109;</a>” 检查是否可以连接成功。显示内容包括“You’ve successfully authenticated”则表示成功。</p><pre><code class="hljs applescript">zz@Zhen MINGW64 /$ ssh -T git@github.comThe authenticity <span class="hljs-keyword">of</span> host &#x27;[ssh.github.com]:<span class="hljs-number">443</span> ([<span class="hljs-number">20.205</span><span class="hljs-number">.243</span><span class="hljs-number">.160</span>]:<span class="hljs-number">443</span>)&#x27; can&#x27;t be established.ED25519 key fingerprint <span class="hljs-keyword">is</span> SHA256:+DiY3wvvV6TuJJhbpZisF/zLDA0zPMSvHdkr4UvCOqU.This host key <span class="hljs-keyword">is</span> known <span class="hljs-keyword">by</span> <span class="hljs-keyword">the</span> following other names/addresses:  ~/.ssh/known_hosts:<span class="hljs-number">1</span>: github.comAre you sure you want <span class="hljs-keyword">to</span> <span class="hljs-keyword">continue</span> connecting (yes/no/[fingerprint])? yesWarning: Permanently added &#x27;[ssh.github.com]:<span class="hljs-number">443</span>&#x27; (ED25519) <span class="hljs-keyword">to</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">list</span> <span class="hljs-keyword">of</span> known hosts.Hi zhenzhang20! You&#x27;ve successfully authenticated, <span class="hljs-keyword">but</span> GitHub <span class="hljs-keyword">does</span> <span class="hljs-keyword">not</span> provide shell access.</code></pre><img src="/2023/07/10/2023-07-10-GitHub-Clone-Push/2023-07-10-SSH_GitHub_Connect_Port433.png" class title="image"></li><li><p>可以成功连接后，进行clone代码到本地：</p><pre><code class="hljs angelscript"><span class="hljs-symbol">zz@</span>Zhen MINGW64 /d/develop/www$ git clone <span class="hljs-symbol">git@</span>github.com:zhenzhang20/blog.gitCloning <span class="hljs-built_in">int</span>o <span class="hljs-string">&#x27;blog&#x27;</span>...remote: Enumerating objects: <span class="hljs-number">8</span>, done.remote: Counting objects: <span class="hljs-number">100</span>% (<span class="hljs-number">8</span>/<span class="hljs-number">8</span>), done.remote: Compressing objects: <span class="hljs-number">100</span>% (<span class="hljs-number">4</span>/<span class="hljs-number">4</span>), done.remote: Total <span class="hljs-number">8</span> (delta <span class="hljs-number">0</span>), reused <span class="hljs-number">5</span> (delta <span class="hljs-number">0</span>), pack-reused <span class="hljs-number">0</span>Receiving objects: <span class="hljs-number">100</span>% (<span class="hljs-number">8</span>/<span class="hljs-number">8</span>), done.</code></pre><!--<img src="/2023/07/10/2023-07-10-GitHub-Clone-Push/2023-07-10-Github_Clone_To_Local.png" class="" title="image"> --></li></ul><h2><span id="zai-xia-zai-de-blog-mu-lu-zhong-tian-jia-yi-ge-add-md-wen-jian-bing-chang-shi-ti-jiao-dao-github-cang-ku">在下载的blog目录中添加一个“add.md”文件，并尝试提交到Github仓库</span><a href="#zai-xia-zai-de-blog-mu-lu-zhong-tian-jia-yi-ge-add-md-wen-jian-bing-chang-shi-ti-jiao-dao-github-cang-ku" class="header-anchor"></a></h2><ul><li>进入blog目录，会自动显示当前仓库的branch为main<img src="/2023/07/10/2023-07-10-GitHub-Clone-Push/2023-07-10-Default_Clone_Branch_Main.png" class title="image"></li></ul><ul><li>添加新增的文件、增加提交注释、提交到远程仓库<pre><code class="hljs dockerfile">git <span class="hljs-keyword">add</span><span class="bash"> .</span>git commit -m <span class="hljs-string">&#x27;initial&#x27;</span>git push origin main</code></pre><img src="/2023/07/10/2023-07-10-GitHub-Clone-Push/2023-07-10-Git_To_Github_Add_Commit_Push.png" class title="image"></li></ul><ul><li>过程中可能报错：<pre><code class="hljs routeros">git push origin mainfatal: unable <span class="hljs-keyword">to</span> access <span class="hljs-string">&#x27;https://github.com.zhenzhang20/blog.git/&#x27;</span>: Recv failure:<span class="hljs-built_in"> Connection </span>was reset</code></pre></li><li>解决方法,运行：<pre><code class="hljs routeros">git<span class="hljs-built_in"> config </span>--global --unset http.proxygit<span class="hljs-built_in"> config </span>--global --unset https.proxy</code></pre></li></ul><!-- <img src="/2023/07/10/2023-07-10-GitHub-Clone-Push/2023-07-10-Git_Push.png" class="" title="image"> -->]]></content>
    
    
    <categories>
      
      <category>Github</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Github</tag>
      
      <tag>Clone</tag>
      
      <tag>Push</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序开发学习与实践-02</title>
    <link href="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/"/>
    <url>/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/</url>
    
    <content type="html"><![CDATA[<ol><li><h3><span id="an-zhuang-ruan-jian">安装软件：</span><a href="#an-zhuang-ruan-jian" class="header-anchor"></a></h3><p> 安装<a href="https://www.dcloud.io/hbuilderx.html">HBuilderX</a>和<a href="https://developers.weixin.qq.com/miniprogram/dev/devtools/download.html">微信开发者工具</a>。</p></li></ol><ol start="2"><li><h3><span id="can-zhao-guan-fang-wen-dang-chuang-jian-demo">参照官方文档创建demo:</span><a href="#can-zhao-guan-fang-wen-dang-chuang-jian-demo" class="header-anchor"></a></h3></li></ol><p>2.1.  在点击工具栏里的文件 -&gt; 新建 -&gt; 项目:<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_create1.png" class title="uni-app_hellodemo_create1"></p><p>   2.2.  选择<code>uni-app</code>类型，输入工程名，选择模板，点击创建，即可成功创建。uni-app自带的模板有 Hello uni-app ，是官方的组件和API示例。还有一个重要模板是 uni ui项目模板，日常开发推荐使用该模板，已内置大量常用组件。<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_create2.png" class title="uni-app_hellodemo_create2"></p><p>   2.3.  选择浏览器运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到浏览器 -&gt; 选择浏览器。运行时遇到报错：<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_issue2.png" class title="uni-app_hellodemo_issue2"></p><p>   2.4.  选择<a href="https://ext.dcloud.net.cn/plugin?name=compile-node-sass">报错连接</a>会自动打开网页，在网页中选择“使用“HBuilderX导入插件”进行安装。</p><p>   2.5.  再次运行可以看到网页正常显示<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_web_display.png" class title="uni-app_hellodemo_web_display"></p><p>   2.6.  选择在微信开发者工具里运行：进入hello-uniapp项目，点击工具栏的运行 -&gt; 运行到小程序模拟器 -&gt; 微信开发者工具。运行时遇到报错：<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_issue3.png" class title="uni-app_hellodemo_issue3"></p><p>   2.7.  打开微信开发者工具，并在“设置–安全设置”中打开“服务端口”。<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-wechat_developer_security_port.png" class title="wechat_developer_security_port"></p><p>   2.8.  再次运行可以看到微信开发者工具中正常显示<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_web_display2.png" class title="uni-app_hellodemo_web_display2"></p><p>至此，demo可以正常运行在网页和微信开发者工具中。</p><h3><span id="3-da-bao">3.  打包</span><a href="#3-da-bao" class="header-anchor"></a></h3><p>   3.1  在HBuilderX工具栏，点击发行，选择原生app-云端打包，如下图：<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_package_entrance.png" class title="uni-app_hellodemo_package_entrance"></p><p>   3.2  出现如下界面，点击打包即可。（在打包前需要先生成Android证书）<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_package_setup.png" class title="uni-app_hellodemo_package_setup"></p><p>   3.3  打包运行时遇到报错1：<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_package_issue1.png" class title="uni-app_hellodemo_package_issue1"><br>            解决方法为：登录DCloud并添加手机认证。</p><p>   3.4  打包运行时遇到报错2：<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_package_issue2.png" class title="uni-app_hellodemo_package_issue2"><br>            解决方法为：参照官方说明，增加Android平台隐私与政策提示框配置方法。</p><p>   3.5  打包运行时遇到报错3：<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_package_issue3.png" class title="uni-app_hellodemo_package_issue3"><br>            解决方法为：网站提交个人信息进行实名认证。</p><p>   3.6  打包运行时遇到报错4：<br>               <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_package_issue4.png" class title="uni-app_hellodemo_package_issue4"><br>               解决方法为：重新打包。</p><p>   3.7  打包成功后会显示：<br>            <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_package_success.png" class title="uni-app_hellodemo_package_success"></p><p>   3.8  打包为小程序版本需要在微信公众平台生成APPID，再通过HBuilderX调用微信开发者工具进行打包、上传，成功后会显示：<br>               <img src="/2021/10/31/2021-10-30-MiniProgram-Study-And-Practice-02/2021-10-30-uni-app_hellodemo_package_success2.png" class title="uni-app_hellodemo_package_success2"></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>小程序</tag>
      
      <tag>APP</tag>
      
      <tag>UNI-APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>小程序开发学习与实践-01</title>
    <link href="/2021/10/30/2021-10-30-MiniProgram-Study-And-Practice-01/"/>
    <url>/2021/10/30/2021-10-30-MiniProgram-Study-And-Practice-01/</url>
    
    <content type="html"><![CDATA[<p>目标：<br>    通过一段时间学习，通过一套代码做一个简单的多端使用APP/小程序。功能：只有一个实时获取所在地区的天气情况。</p><h3><span id="xuan-xing-diao-cha">选型调查</span><a href="#xuan-xing-diao-cha" class="header-anchor"></a></h3><p>我需要尝试一套代码多端使用，通过网络搜索，把目光转向：Flutter、React Native(RN)、uniapp这三个。</p><p><a href="https://flutter.dev/">Flutter</a>是Google开源的构建用户界面（UI）工具包，帮助开发者通过一套代码库高效构建多平台精美应用，支持移动、Web、桌面和嵌入式平台。 Flutter是一个UI框架，一份代码可以同时生成iOS和Android两个高性能、高保真的应用程序。目标是使开发人员能够交付在不同平台上都感觉自然流畅的高性能应用程序。我们兼容滚动行为、排版、图标等方面的差异。<br>可以帮助我们：提高开发效率，同一份代码开发iOS和Android，减少代码量，减少开发成本，轻松迭代；创建美观，高度定制的用户体验。Flutter包括一个现代的响应式框架、一个2D渲染引擎Skia、现成的widget和开发工具。这些组件可以帮助您快速地设计、构建、测试和调试应用程序。一切皆为组件widget，开发中一般是通过继承 无状态 StatelessWidget 控件或者 有状态 StatefulWidget 控件 来实现页面。</p><p><a href="https://reactnative.dev/">React Native</a>是Facebook开源的跨平台移动应用开发框架，是Facebook早先开源的JS框架 React 在原生移动应用平台的衍生产物，支持iOS和安卓两大平台。RN使用Javascript语言，类似于HTML的JSX，以及CSS来开发移动应用，因此熟悉Web前端开发的技术人员只需很少的学习就可以进入移动应用开发领域。<br>RN将原生开发的最佳部分与 React 相结合， 致力于成为构建用户界面的顶尖 JavaScript 框架。是一套 UI 框架，默认情况下RN会在 Activity 下加载 JS 文件，然后运行在 JavaScriptCore 中解析 Bundle 文件布局，最终堆叠出一系列的原生控件进行渲染。简单来说就是 通过写 JS 代码配置页面布局，然后RN最终会解析渲染成原生控件，如 标签对应 ViewGroup/UIView ， 标签对应 ScrollView/UIScrollView ， 标签对应 ImageView/UIImageView 等，让页面的性能能得到进一步的提升。在页面布局上的每一次操作都会通过中间桥链接与原生native双向通信，在编写格式上，在界面开发上延续了 React 的开发风格，支持 scss/sass 、样式代码分离，支持 React Hook 函数式编程。</p><p><a href="https://uniapp.dcloud.io/">uni-app</a>是一个使用Vue.js开发所有前端应用的框架，开发者编写一套代码，可发布到iOS、Android、Web（响应式）、以及各种小程序（微信/支付宝/百度/头条/QQ/钉钉/淘宝）、快应用等多个平台。即使不跨端，uni-app也是更好的小程序开发框架、更好的App跨平台框架、更方便的H5开发框架。<br>uni-app功能框架图可看出，uni-app在跨平台的过程中，不牺牲平台特色，可优雅的调用平台专有能力。</p><p><a href="https://taro.aotu.io/">Taro</a>是一个开放式跨端跨框架解决方案，支持使用 React/Vue/Nerv 等框架来开发 微信 / 京东 / 百度 / 支付宝 / 字节跳动 / QQ 小程序 / H5 / RN 等应用。现如今市面上端的形态多种多样，Web、React Native、微信小程序等各种端大行其道，当业务要求同时在不同的端都要求有所表现的时候，针对不同的端去编写多套代码的成本显然非常高，这时候只编写一套代码就能够适配到多端的能力就显得极为需要。</p><h3><span id="xuan-xing">选型</span><a href="#xuan-xing" class="header-anchor"></a></h3><p>通过网上评论，我选择了uni-app进行后续开发。原因有：</p><ol><li>有自家的IDE（HBuilderX），编译调试打包一体化，对原生App开发体验友好。Taro 开发流程稍微复杂一点。</li><li>uni-app使用vue语法及小程序语法，我都有动力去学习、使用。</li><li>丰富的插件可以选用</li></ol><p>希望uni-app逐步完善网上抱怨的文档不全、bug不改的问题。</p><h5><span id="can-kao-lie-biao">参考列表</span><a href="#can-kao-lie-biao" class="header-anchor"></a></h5><p><a href="https://blog.csdn.net/u011590754/article/details/115453390">uni-app,Taro,react native和flutter的区别</a><br><a href="https://www.jianshu.com/p/03e08399587e">Taro vs uni-app选型对比经历</a><br><a href="https://juejin.cn/post/6974584590841167879">小程序框架对比（Taro VS uni-app</a>）</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>小程序</tag>
      
      <tag>APP</tag>
      
      <tag>UNI-APP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>WebStack-Laravel个人导航网站后台服务</title>
    <link href="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator-Backend/"/>
    <url>/2021/09/13/2021-09-13-WebStack-Laravel-Navigator-Backend/</url>
    
    <content type="html"><![CDATA[<p><a href="https://laravel-admin.org/">laravel-admin</a> 是一个可以快速帮你构建后台管理的工具，它提供的页面组件和表单元素等功能，能帮助你使用很少的代码就实现功能完善的后台管理功能。</p><h4><span id="xia-zai-an-zhuang">下载安装</span><a href="#xia-zai-an-zhuang" class="header-anchor"></a></h4><ol><li><p>执行 composer require encore/laravel-admin 进行下载</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator-Backend/2021-09-13-laravel-admin_download.png" class title="laravel-admin_download"> </li></ol><ol start="2"><li><p>执行 php artisan vendor:publish –provider=”Encore\Admin\AdminServiceProvider” 发布资源</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator-Backend/2021-09-13-laravel-admin_publish_resource.png" class title="laravel-admin_publish_resource"> </li></ol><ol start="3"><li><p>执行 php artisan admin:install 进行安装</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator-Backend/2021-09-13-laravel-admin_install.png" class title="laravel-admin_install"> </li></ol><ol start="4"><li><p>尝试打开后台地址：<a href="http://127.0.0.1:8000/admin">http://127.0.0.1:8000/admin</a></p><p>可能遇到错误：<strong>127.0.0.1</strong> 将您重定向的次数过多。</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator-Backend/2021-09-13-backend_open_error01.png" class title="backend_open_error01"> <p>解决方法：</p></li></ol><p>​        在根目录找到文件：config/admin.php， 添加如下代码：</p><pre><code class="hljs sml"><span class="hljs-symbol">&#x27;auth&#x27;</span>=&gt;[    ...    <span class="hljs-symbol">&#x27;excepts&#x27;</span>=&gt;[        <span class="hljs-symbol">&#x27;auth</span>/login&#x27;,    ],],</code></pre>  <img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator-Backend/2021-09-13-laravel-admin_fix_redirect.png" class title="laravel-admin_fix_redirect"><ol start="5"><li><p>尝试打开后台地址：<a href="http://127.0.0.1:8000/admin">http://127.0.0.1:8000/admin</a> 正常</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator-Backend/2021-09-13-laravel-admin_login.png" class title="laravel-admin_login"> </li></ol><p>默认用户：admin</p><p>默认密码：admin</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator-Backend/2021-09-13-laravel-admin_logedin.png" class title="laravel-admin_logedin"> <ol start="6"><li><p>提交网址时可能会遇到下述错误信息：NotSupportedException in AbstractEncoder.php line 151: Encodingformat (tmp) is not supported.</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator-Backend/2021-09-13-add_web_error01.png" class title="add_web_error01"> <p>解决方法：</p><p>打开“~WebStack-Laravel\vendor\intervention\image\src\Intervention\Image\AbstractEncoder.php” ，增加 case ‘tmp’: 。</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator-Backend/2021-09-13-laravel-admin_fix_image_upload.png" class title="laravel-admin_fix_image_upload"> </li></ol><p>​</p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>WebStack</tag>
      
      <tag>Laravel</tag>
      
      <tag>导航</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>基于WebStack-Laravel制作个人导航网站</title>
    <link href="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/"/>
    <url>/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/</url>
    
    <content type="html"><![CDATA[<p><a href="https://github.com/hui-ho/WebStack-Laravel">WebStack-Laravel</a> 是一个开源的网址导航网站项目，具备完整的前后台，尝试使用其制作自己的网址导航。</p><h4><span id="xia-zai">下载</span><a href="#xia-zai" class="header-anchor"></a></h4><p>​    通过git命令下载WebStack-Laravel。建议先fork到自己目录，然后进行下载</p><pre><code class="hljs awk">git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/hui-ho/</span>WebStack-Laravel.git</code></pre>  <img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-git_clone.png" class title="git_clone"> <h4><span id="an-zhuang-yi-lai">安装依赖</span><a href="#an-zhuang-yi-lai" class="header-anchor"></a></h4><ol><li><p>运行 composer install 进行安装</p><p>可能会遇到的错误：</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-composer_install_error01.png" class title="composer_install_error01"> </li></ol><p>​       解决方法：运行</p><pre><code class="hljs ebnf"><span class="hljs-attribute">composer update</span></code></pre><p>​        可能会遇到的错误：</p>  <img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-composer_install_error02.png" class title="composer_install_error02"> <p>​        解决方法：</p><p>​        打开提示的网址：  <a href="https://github.com/settings/tokens/new?scopes=repo&amp;description=Composer+on+DESKTOP-PIKT8DJ+2021-08-17+0902">https://github.com/settings/tokens/new?scopes=repo&amp;description=Composer+on+DESKTOP-PIKT8DJ+2021-08-17+0902</a></p><p>​        选择过期日期，并产生token</p>  <img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-generate_key.png" class title="generate_key">   <img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-generated_key.png" class title="generated_key"> <p>​        运行 composer 命令把token存入C:\Users%UserName%\AppData\Roaming\Composer\auto.json文件中</p><pre><code class="hljs routeros">composer<span class="hljs-built_in"> config </span>--global --auth github-oauth.github.com ghp_VJdEzOfO2n</code></pre><p>​        auth.json内容如下：</p><pre><code class="hljs json">&#123;    <span class="hljs-attr">&quot;bitbucket-oauth&quot;</span>: &#123;&#125;,    <span class="hljs-attr">&quot;github-oauth&quot;</span>: &#123;        <span class="hljs-attr">&quot;github.com&quot;</span>: <span class="hljs-string">&quot;ghp_VJdEzOfO2nQ&quot;</span>&#125;,    <span class="hljs-attr">&quot;gitlab-oauth&quot;</span>: &#123;&#125;,    <span class="hljs-attr">&quot;gitlab-token&quot;</span>: &#123;&#125;,    <span class="hljs-attr">&quot;http-basic&quot;</span>: &#123;&#125;,    <span class="hljs-attr">&quot;bearer&quot;</span>: &#123;&#125;&#125;</code></pre><p>​        可能会遇到的错误：</p>  <img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-composer_install_error03.png" class title="composer_install_error03">     <p>​    解决方法：</p><p>打开“composer.json”文件，并做如下修改。原因是 caouecs/laravel-lang 不在维护，更改到 laravel-lang/lang</p><pre><code class="hljs 1c"><span class="hljs-string">&quot;caouecs/laravel-lang&quot;</span>: <span class="hljs-string">&quot;~3.0&quot;</span>,</code></pre><p>​       更改为：</p><pre><code class="hljs 1c"><span class="hljs-string">&quot;laravel-lang/lang&quot;</span>: <span class="hljs-string">&quot;~3.0&quot;</span>,</code></pre><p>​       </p><ol start="2"><li><p>由于数据库原因可能遇到的问题：</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-composer_install_error04.png" class title="composer_install_error04"> <p>解决方法：</p><p>打开一个MySQL数据库，创建一个带有密码的用户名。如： mysqluser</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-mysql_account.png" class title="mysql_account"> <p>修改 ~\WebStack-Laravel\config\database.php 中的database、username、password 为正确的内容</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-mysql_database_config.png" class title="mysql_database_config"> </li></ol><ol start="3"><li><p>最终顺利安装，有几项不建议使用的包暂时没有处理。</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-composer_install_error05.png" class title="composer_install_error05"> </li></ol><h4><span id="bian-ji-pei-zhi">编辑配置</span><a href="#bian-ji-pei-zhi" class="header-anchor"></a></h4><p>​    复制.env.example 为.env 并根据实际情况修改其中数据库相关内容，如：</p><pre><code class="hljs ini"><span class="hljs-attr">DB_DATABASE</span>=mysql<span class="hljs-attr">DB_USERNAME</span>=mysqluser<span class="hljs-attr">DB_PASSWORD</span>=mysqluser</code></pre><h4><span id="sheng-cheng-key">生成 KEY</span><a href="#sheng-cheng-key" class="header-anchor"></a></h4><p>​    进入到项目的根目录中，执行  php artisan key:generate ， 命令行中可显示出生成的key值，复制key值到 .env中的appkey中。</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-php_key_generate.png" class title="php_key_generate"> <h4><span id="qian-yi-shu-ju">迁移数据</span><a href="#qian-yi-shu-ju" class="header-anchor"></a></h4><p>​    进入到项目的根目录中，执行  php artisan migrate:refresh –seed </p><p>​    过程中可能遇到下面错误信息：</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-data_migration_error01.png" class title="data_migration_error01"> <p>解决方法：</p><p>修改数据库指定的用户的权限，给用户CREATE权限。</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-mysql_account_auth.png" class title="mysql_account_auth"> <p>​    迁移成功后显示为:</p> <img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-data_migration_success.png" class title="data_migration_success"><h4><span id="ben-di-ce-shi">本地测试</span><a href="#ben-di-ce-shi" class="header-anchor"></a></h4><p>​    进入到项目的根目录中，执行  php artisan serve </p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-start_local_server.png" class title="start_local_server"> <p>​    注意：默认 Lar­avel 开启服务后，默认会监听在 localhost 的 8000 端口上。如遇到端口冲突问题，可以可以使用 –host 参数与 –port 参数来更换监听的接口地址或端口号。</p><pre><code class="hljs angelscript">php artisan serve --host=<span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> --port=<span class="hljs-number">9889</span></code></pre><h4><span id="an-zhuang-wan-cheng">安装完成</span><a href="#an-zhuang-wan-cheng" class="header-anchor"></a></h4><p>​    打开网页 <a href="http://127.0.0.1:8000/">http://127.0.0.1:8000</a> 尝试访问</p><img src="/2021/09/13/2021-09-13-WebStack-Laravel-Navigator/2021-09-13-local_web.png" class title="local_web">]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>WebStack</tag>
      
      <tag>Laravel</tag>
      
      <tag>导航</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laragon基本使用</title>
    <link href="/2021/08/16/2021-08-16-Laragon-Basic-Using/"/>
    <url>/2021/08/16/2021-08-16-Laragon-Basic-Using/</url>
    
    <content type="html"><![CDATA[<p>Laragon 安装完成后，可以用来创建Laravel项目。下面是Laragon的基本使用介绍</p><h3><span id="ji-ben-shi-yong">基本使用</span><a href="#ji-ben-shi-yong" class="header-anchor"></a></h3><ol><li><p>Laragon启动后界面如下</p><img src="/2021/08/16/2021-08-16-Laragon-Basic-Using/2021-08-16-started.png" class title="started"> </li></ol><ol start="2"><li><p>要访问数据库，可以点击 Database 按钮：</p><img src="/2021/08/16/2021-08-16-Laragon-Basic-Using/2021-08-16-database_default.png" class title="database_default"> </li></ol><ol start="3"><li><p>用户可以新建数据库并进行连接</p><img src="/2021/08/16/2021-08-16-Laragon-Basic-Using/2021-08-16-database_new.png" class title="database_new"> </li></ol><ol start="4"><li>选择数据库My Laragon，用户名是 root，密码是空字符串，点击打开按钮，就可以访问这个默认的数据库：</li></ol><img src="/2021/08/16/2021-08-16-Laragon-Basic-Using/2021-08-16-database_open.png" class title="database_open">  <ol start="5"><li><p>当然你也可以使用其他自己喜欢的数据库客户端连接到这个数据库进行操作。</p></li><li><p>点击 Laragon 界面的 Terminal 按钮可以进入到一个类 Unix 的终端工具 Cmder 进行命令行操作：</p></li></ol><img src="/2021/08/16/2021-08-16-Laragon-Basic-Using/2021-08-16-terminal.png" class title="terminal"> <p> 最后，Laragon 界面还有一个 Root 按钮，点击之后即可进入 Laragon 文档根目录，我的 Laragon 安装在 C 盘下，所以对应的文档根目录是 <code>C:\laragon\www</code>。</p><h3><span id="zi-dong-chuang-jian-xu-ni-zhu-ji">自动创建虚拟主机</span><a href="#zi-dong-chuang-jian-xu-ni-zhu-ji" class="header-anchor"></a></h3><h5><span id="fang-fa-yi">方法一：</span><a href="#fang-fa-yi" class="header-anchor"></a></h5><p>通过 ”Quick app - Laravel“创建，创建时会先进行Laravel安装</p><img src="/2021/08/16/2021-08-16-Laragon-Basic-Using/2021-08-16-create_app_laravel.png" class title="create_app_laravel"> <img src="/2021/08/16/2021-08-16-Laragon-Basic-Using/2021-08-16-auto_install_laravel.png" class title="auto_install_laravel"> <h5><span id="fang-fa-er">方法二：</span><a href="#fang-fa-er" class="header-anchor"></a></h5><p>安装 Laravel<br>Laravel 使用 Composer 来管理项目依赖。因此，在使用 Laravel 之前，请确保你的机器已经安装了 Composer。</p><p>通过使用 Composer 安装 Laravel 安装器：</p><pre><code class="hljs armasm"><span class="hljs-symbol">composer</span> <span class="hljs-meta">global</span> <span class="hljs-meta">require</span> laravel/installer</code></pre><p>确保将 composer’s system-wide vendor bin 在Windows操作系统中的位置为： %USERPROFILE%\AppData\Roaming\Composer\vendor\bin，将该路径放置在你的系统环境变量 $PATH 中，以便系统可以找到 Laravel 的可执行文件</p><img src="/2021/08/16/2021-08-16-Laragon-Basic-Using/2021-08-16-laravel_cmd.png" class title="laravel_cmd"> <p> 通过laravel 命令创建Laravel 项目</p><pre><code class="hljs actionscript">laravel <span class="hljs-keyword">new</span> blog</code></pre><p>注意: 通过该方法创建的项目需要重启Apache服务</p><h5><span id="fang-fa-san">方法三：</span><a href="#fang-fa-san" class="header-anchor"></a></h5><p> 通过composer 命令创建Laravel 项目</p><pre><code class="hljs dsconfig"><span class="hljs-string">composer </span><span class="hljs-built_in">create-project</span> <span class="hljs-built_in">--prefer-dist</span> <span class="hljs-string">laravel/</span><span class="hljs-string">laravel </span><span class="hljs-string">blog</span></code></pre><p>创建后，在浏览中通过 <code>http://blog.test</code> 访问</p><img src="/2021/08/16/2021-08-16-Laragon-Basic-Using/2021-08-16-laravel_default_web.png" class title="laravel_default_web"> <p>如果你想将域名后缀 <code>.test</code> 改成其它如 <code>.com</code> 可以通过点击 Laragon 界面上的齿轮按钮对默认配置进行修改：</p><img src="/2021/08/16/2021-08-16-Laragon-Basic-Using/2021-08-16-setting_change_hostname.png" class title="setting_change_hostname"> <p>将 <code>.test 改成 </code>.com<code>重新加载 Apache 服务即可通过</code><a href="http://blog.com访问/">http://blog.com访问</a></p>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>Laragon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Bilibili网站（B站）下载视频</title>
    <link href="/2021/08/16/2021-09-05-Bilibili-Video-Download/"/>
    <url>/2021/08/16/2021-09-05-Bilibili-Video-Download/</url>
    
    <content type="html"><![CDATA[<p>为了能把视频放到不联网的电视中观看，需要先下载视频到电脑，通过U盘连接电脑观看。</p><h4><span id="xia-zai-zhun-bei">下载准备：</span><a href="#xia-zai-zhun-bei" class="header-anchor"></a></h4><ol><li><p>电脑中安装<a href="https://www.python.org/">python</a>软件。安装后运行 ‘python –version’ 进行检查安装是否正常</p><img src="/2021/08/16/2021-09-05-Bilibili-Video-Download/2021-09-05-python_install_check.png" class title="python_install_check"></li><li><p>通过python安装<a href>you-get </a>软件。安装后运行 ‘you-get –version’ 进行检查安装是否正常</p><pre><code class="hljs sql">pip3 <span class="hljs-keyword">install</span> you-<span class="hljs-keyword">get</span></code></pre><img src="/2021/08/16/2021-09-05-Bilibili-Video-Download/2021-09-05-youget_install_check.png" class title="youget_install_check"></li><li><p>安装<a href="https://ffmpeg.org/">FFMpeg</a>软件。安装后运行 ‘ffmpeg -version’ 进行检查安装是否正常</p><img src="/2021/08/16/2021-09-05-Bilibili-Video-Download/2021-09-05-ffmpeg_install_check.png" class title="ffmpeg_install_check"></li></ol><h4><span id="xia-zai">下载</span><a href="#xia-zai" class="header-anchor"></a></h4><ol><li><p>在B站找到需要下载的视频连接，如 【500集全】美国中小学精选课程 的连接为 <a href="https://www.bilibili.com/video/BV1c7411Z78e">https://www.bilibili.com/video/BV1c7411Z78e</a></p></li><li><p>在批处理窗口运行you-get -i 命令查看所需视频有哪些可以选择的格式（清晰度）</p><pre><code class="hljs awk">you-get -i https:<span class="hljs-regexp">//</span>www.bilibili.com<span class="hljs-regexp">/video/</span>BV1c7411Z78e</code></pre><p>显示结果如下：</p><img src="/2021/08/16/2021-09-05-Bilibili-Video-Download/2021-09-05-check_video_format.png" class title="check_video_format"></li></ol><p>​       这里可以看到有高清视频源可以下载，对应参数为“dash-flv720”</p><ol start="3"><li><p>创建批处理下载文件并进行下载</p><p>&lt;!–hexoPostRenderEscape:<pre><code class="hljs dos">@<span class="hljs-built_in">echo</span> off</code></pre></p></li></ol><p><span class="hljs-built_in">set</span> KEY=BV1c7411Z78e<br><span class="hljs-built_in">set</span> RESOLUTION=&quot;–<span class="hljs-built_in">format</span>=dash-flv720&quot; </p><p><span class="hljs-built_in">mkdir</span> <span class="hljs-variable">%KEY%</span><br><span class="hljs-built_in">pushd</span> <span class="hljs-variable">%KEY%</span></p><p>you-get -o . <a href="https://www.bilibili.com/video/">https://www.bilibili.com/video/</a><span class="hljs-variable">%KEY%</span>?p=<span class="hljs-number">1</span> -l  <span class="hljs-variable">%RESOLUTION%</span></p><p><span class="hljs-built_in">pause</span>:hexoPostRenderEscape–&gt;</p><h4><span id="xia-zai-hou-chu-li">下载后处理</span><a href="#xia-zai-hou-chu-li" class="header-anchor"></a></h4><ol><li><p>下载后，每个视频包含3个文件，B站下载的文件中视频和音频被分开。</p><img src="/2021/08/16/2021-09-05-Bilibili-Video-Download/2021-09-05-downloaded_videos.png" class title="downloaded_videos"></li></ol><p>​        其中：</p><p>​        xml格式为弹幕，可以删除</p><p>​        *00*.mp4 为视频文件</p><p>​        *01*.mp4 为音频文件</p><ol start="2"><li>通过ffmpeg命令合并视频文件：</li></ol><pre><code class="hljs css"><span class="hljs-selector-tag">ffmpeg</span> <span class="hljs-selector-tag">-i</span> &quot;【500集全】美国中小学精选课程 (<span class="hljs-selector-tag">P1</span>. 【001】自然科学 <span class="hljs-selector-tag">Parts</span> <span class="hljs-selector-tag">of</span> <span class="hljs-selector-tag">Plants</span>)<span class="hljs-selector-attr">[01]</span><span class="hljs-selector-class">.mp4</span>&quot; <span class="hljs-selector-tag">-i</span> &quot;【500集全】美国中小学精选课程 (<span class="hljs-selector-tag">P1</span>. 【001】自然科学 <span class="hljs-selector-tag">Parts</span> <span class="hljs-selector-tag">of</span> <span class="hljs-selector-tag">Plants</span>)<span class="hljs-selector-attr">[00]</span><span class="hljs-selector-class">.mp4</span>&quot; <span class="hljs-selector-tag">-c</span> <span class="hljs-selector-tag">copy</span> &quot;【500集全】美国中小学精选课程 (<span class="hljs-selector-tag">P1</span>. 【001】自然科学 <span class="hljs-selector-tag">Parts</span> <span class="hljs-selector-tag">of</span> <span class="hljs-selector-tag">Plants</span>)<span class="hljs-selector-class">.mp4</span>&quot;</code></pre><p>​        其语法为：</p><pre><code class="hljs stylus">ffmpeg -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">audio</span><span class="hljs-selector-class">.mp4</span> -<span class="hljs-selector-tag">i</span> <span class="hljs-selector-tag">video</span><span class="hljs-selector-class">.mp4</span> -c copy output.mp4</code></pre><p>​        合并后结果为：</p>  <img src="/2021/08/16/2021-09-05-Bilibili-Video-Download/2021-09-05-merged_videos.png" class title="merged_videos"><h4><span id="xia-zai-hou-pi-liang-chu-li">下载后批量处理</span><a href="#xia-zai-hou-pi-liang-chu-li" class="header-anchor"></a></h4><p>下载后，通过下面的python脚本来删除弹幕、合并文件</p><pre><code class="hljs routeros">import os, subprocess<span class="hljs-comment">###  bilibili下载的视频会自动分离视频和音频，通过该脚本合并视频及音频，合并后删除原视频、音频</span>def merge_video_audio(video_path, audio_path, out_path):    cmd_str = f<span class="hljs-string">&#x27;ffmpeg -i &quot;&#123;video_path&#125;&quot; -i &quot;&#123;audio_path&#125;&quot; -c copy &quot;&#123;out_path&#125;&quot; -y&#x27;</span>    subprocess.<span class="hljs-builtin-name">run</span>(cmd_str, <span class="hljs-attribute">encoding</span>=<span class="hljs-string">&quot;utf-8&quot;</span> , <span class="hljs-attribute">shell</span>=<span class="hljs-literal">True</span>)    # <span class="hljs-builtin-name">print</span>(cmd_str)    <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&#x27;视频转化完成！！！&#x27;</span>)def handle_bilibili_download_merge(basefloder):    # 循环遍历文件夹    listfiles = os.listdir(basefloder)    <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> listfiles:        filename = str(item)        <span class="hljs-keyword">if</span> filename.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&quot;[00].mp4&quot;</span>) != -1:            #<span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;find :&quot;</span> + filename)            # 找到[00].mp4 及[01].mp4的项            corresponding = filename.replace(<span class="hljs-string">&quot;[00]&quot;</span>,<span class="hljs-string">&quot;[01]&quot;</span>)            <span class="hljs-keyword">if</span> corresponding <span class="hljs-keyword">in</span> listfiles:                <span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;find one&quot;</span> + corresponding)                output = filename.replace(<span class="hljs-string">&quot;[00]&quot;</span>,<span class="hljs-string">&quot;&quot;</span>)                # 合并                video_path = os.path.join(basefloder, filename)                audio_path = os.path.join(basefloder, corresponding)                out_path = os.path.join(basefloder, output)                merge_video_audio(video_path, audio_path, out_path)                os.<span class="hljs-builtin-name">remove</span>(video_path)                os.<span class="hljs-builtin-name">remove</span>(audio_path)        elif item.<span class="hljs-builtin-name">find</span>(<span class="hljs-string">&quot;cmt.xml&quot;</span>) != -1:            #<span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;------------delete :&quot;</span> +   filename)            file_path = os.path.join(basefloder, filename)            os.<span class="hljs-builtin-name">remove</span>(file_path)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    <span class="hljs-attribute">BASE_FOLDER</span>=<span class="hljs-string">&quot;C:\\Users\\ZZ\\Desktop\\download&quot;</span>    handle_bilibili_download_merge(BASE_FOLDER)</code></pre>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>Bilibili</tag>
      
      <tag>B站</tag>
      
      <tag>下载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Laragon安装</title>
    <link href="/2021/08/16/2021-08-16-Laragon-Install/"/>
    <url>/2021/08/16/2021-08-16-Laragon-Install/</url>
    
    <content type="html"><![CDATA[<p>准备Laravel 开发环境时，有多种选择：Homestead、LaraDock、Laragon 和Valet 。Valet 仅支持Mac系统，Homestead 和 LaraDock 虽说支持 Windows 系统，但很复杂，过程中会遇到各种奇怪问题。最后选择在Windows上安装对 Laravel 非常友好的Laragon 集成开发环境。</p><p>Laragon是一个可移植，隔离，快速且功能强大的通用开发环境，适用于PHP，Node.js，Python，Java，Go，Ruby。它快速，轻便，易于使用且易于扩展。</p><h3><span id="an-zhuang">安装</span><a href="#an-zhuang" class="header-anchor"></a></h3><ol><li><p>下载 <a href="https://laragon.org/download/">Laragon</a>。</p></li><li><p>安装过程中，语言选择最好选择English，如果用中文简体，会出现乱码。</p><img src="/2021/08/16/2021-08-16-Laragon-Install/2021-08-16-language_select.png" class title="language_select">    </li></ol><ol start="3"><li><p>安装过程中常用设置选项，强烈建议勾选自动创建虚拟主机（Auto virtual hosts）。</p><img src="/2021/08/16/2021-08-16-Laragon-Install/2021-08-16-install_setup.png" class title="install_setup">    </li></ol><ol start="4"><li>然后下一步点击安装即可。下面是 Laragon 启动后的界面：</li></ol><img src="/2021/08/16/2021-08-16-Laragon-Install/2021-08-16-startup.png" class title="startup"> <ol start="5"><li>击右上角的”Preferences…” 进行设置，选择要开启的服务：</li></ol><img src="/2021/08/16/2021-08-16-Laragon-Install/2021-08-16-setting.png" class title="setting"> <ol start="6"><li>通过设置选项可以根据自己的喜好进行设置</li></ol><img src="/2021/08/16/2021-08-16-Laragon-Install/2021-08-16-setting_general.png" class title="setting_general"> <img src="/2021/08/16/2021-08-16-Laragon-Install/2021-08-16-setting_servers.png" class title="setting_servers.png"> <ol start="7"><li>要启动 Apache、MySQL 服务，需要点击 Start All 按钮</li></ol><img src="/2021/08/16/2021-08-16-Laragon-Install/2021-08-16-started.png" class title="started"> <ol start="8"><li>这样点击 Web 即可打开浏览器访问默认站点 <code>http://localhost</code>：</li></ol><img src="/2021/08/16/2021-08-16-Laragon-Install/2021-08-16-open_default_localhost.png" class title="open_default_localhost"> <h3><span id="chang-jian-wen-ti">常见问题</span><a href="#chang-jian-wen-ti" class="header-anchor"></a></h3><ol><li>服务器无法启动。</li></ol><img src="/2021/08/16/2021-08-16-Laragon-Install/2021-08-16-startup_apache_error.png" class title="startup_apache_error"> <ol start="2"><li>看上面的报错信息，如果是could not bind to address 0.0.0.0:443,说明是443端口被占用了，此时需要修改httpd-ssl.conf 将端口改为442即可。<br>Laragon提供了快捷打开httpd-ssl.conf 文件的菜单，如下图：</li></ol><img src="/2021/08/16/2021-08-16-Laragon-Install/2021-08-16-setting_apache_ssl.png" class title="setting_apache_ssl"> <ol start="3"><li>如果上面报错信息是could not bind to address 0.0.0.0:80，说明是80端口被占用了，此时可以修改apache的端口即可。</li></ol><img src="/2021/08/16/2021-08-16-Laragon-Install/2021-08-16-setting_servers_apache_port.png" class title="setting_servers_apache_port">]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>Laragon</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>XAMPP安装</title>
    <link href="/2021/08/13/2021-08-13-XAMPP-Install/"/>
    <url>/2021/08/13/2021-08-13-XAMPP-Install/</url>
    
    <content type="html"><![CDATA[<h4><span id="jian-jie">简介</span><a href="#jian-jie" class="header-anchor"></a></h4><p>XAMPP（Apache+MySQL+PHP+PERL）是一个功能强大的建站集成软件包。这个软件包原来的名字是 LAMPP，但是为了避免误解，最新的几个版本就改名为 XAMPP 了。它可以在Windows、Linux、Solaris、Mac OS X 等多种操作系统下安装使用，支持多语言：英文、简体中文、繁体中文、韩文、俄文、日文等。</p><p>许多人通过他们自己的经验认识到安装 Apache 服务器是件不容易的事儿。如果您想添加 MySQL、PHP 和 Perl，那就更难了。XAMPP 是一个易于安装且包含 MySQL、PHP 和 Perl 的 Apache 发行版。XAMPP 的确非常容易安装和使用：只需下载，解压缩，启动即可。</p><h4><span id="xia-zai-an-zhuang">下载安装</span><a href="#xia-zai-an-zhuang" class="header-anchor"></a></h4><p>官方下载地址：<a href="https://www.apachefriends.org/zh_cn/download.html%EF%BC%8C%E9%80%89%E6%8B%A9%E5%90%88%E9%80%82%E7%9A%84%E7%89%88%E6%9C%AC%E8%BF%9B%E8%A1%8C%E4%B8%8B%E8%BD%BD%E5%AE%89%E8%A3%85%E3%80%82">https://www.apachefriends.org/zh_cn/download.html，选择合适的版本进行下载安装。</a></p><ol><li><p>安装过程中可能遇到报错：提示需要关闭UAC</p><img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-apache_install_uac.png" class title="apache_install_uac"></li></ol><p>  解决：忽略了这个提升，同时安装在C:\XAMPP 目录（不要安装在默认的C:\Program Files)</p><ol start="2"><li><p>启动Apache失败</p><img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-apache_port_error.png" class title="apache_port_error"><p>解决：修改端口号。如Main Port修改为 8001 、SSL Port修改为 4431。同时在界面及文件中进行修改，参照下图：</p><img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-apache_port.png" class title="apache_port"></li></ol>  <img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-apache_port_httpd.png" class title="apache_port_httpd">  <img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-apache_port_httpd_edit.png" class title="apache_port_httpd_edit">  <img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-apache_port_httpd_ssl.png" class title="apache_port_httpd_ssl">  <img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-apache_port_httpd_ssl_edit.png" class title="apache_port_httpd_ssl_edit"><ol start="3"><li><p>修改端口后可以正常启动，启动结果如下:</p><img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-apache_started.png" class title="apache_started"></li></ol><ol start="4"><li><p>设置系统环境变量</p><img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-xampp_phphome.png" class title="xampp_phphome"><img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-xampp_phphome_path.png" class title="xampp_phphome_path"></li></ol><ol start="5"><li><p>启动命令行检查php 版本，能返回版本即可</p><img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-xampp_php_version.png" class title="xampp_php_version"></li></ol><ol start="6"><li><p>启动Tomcat后，窗口中显示乱码</p><img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-messy_code.png" class title="messy_code"><p>解决：修改tomcat的配置文件中的编码为Windows的默认编码：GBK。重启tomcat后，log显示正常</p><img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-xampp_tomcat_log_setting.png" class title="xampp_tomcat_log_setting"><img src="/2021/08/13/2021-08-13-XAMPP-Install/2021-08-13-xampp_tomcat_log_gbk.png" class title="xampp_tomcat_log_gbk"></li></ol>]]></content>
    
    
    <categories>
      
      <category>编程</category>
      
    </categories>
    
    
    <tags>
      
      <tag>编程</tag>
      
      <tag>XAMPP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬取七麦(Qimai)网应用下载量数据</title>
    <link href="/2020/09/17/2020-09-17-Spider-Qimai-Rank/"/>
    <url>/2020/09/17/2020-09-17-Spider-Qimai-Rank/</url>
    
    <content type="html"><![CDATA[<p>通过python写脚本抓取七麦数据上Android应用在各大应用平台的下载量。</p><h3><span id="huo-qu-js-dai-ma">获取js代码</span><a href="#huo-qu-js-dai-ma" class="header-anchor"></a></h3><p>网络上有很多方法，不展开，最终获取信息如下：</p><pre><code class="hljs javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">C</span>(<span class="hljs-params">a, n</span>) </span>&#123;    a = a[<span class="hljs-string">&quot;split&quot;</span>](<span class="hljs-string">&quot;&quot;</span>);    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> t = a[<span class="hljs-string">&quot;length&quot;</span>], e = n[<span class="hljs-string">&quot;length&quot;</span>], r = <span class="hljs-string">&quot;charCodeAt&quot;</span>, i = <span class="hljs-number">0</span>; i &lt; t; i++) a[i] = m(a[i][r](<span class="hljs-number">0</span>) ^ n[(i + <span class="hljs-number">10</span>) % e][r](<span class="hljs-number">0</span>));    <span class="hljs-keyword">return</span> a[<span class="hljs-string">&quot;join&quot;</span>](<span class="hljs-string">&quot;&quot;</span>)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">m</span>(<span class="hljs-params">n</span>) </span>&#123;        <span class="hljs-keyword">var</span> t = <span class="hljs-string">&quot;fromCharCode&quot;</span>;        <span class="hljs-keyword">return</span> <span class="hljs-built_in">String</span>[t](n)    &#125;    <span class="hljs-comment">//上面是分析f(k)函数</span>    <span class="hljs-comment">//下面是f(e)函数</span>    <span class="hljs-comment">//函数v(n)就是f（e）函数的结果，m函数和上面的函数一样，只需要分析其中的n_fun函数的实现</span><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">v</span>(<span class="hljs-params">n</span>) </span>&#123;    <span class="hljs-keyword">return</span> n_fun(<span class="hljs-built_in">encodeURIComponent</span>(n)[<span class="hljs-string">&quot;replace&quot;</span>](<span class="hljs-regexp">/%([0-9A-F]&#123;2&#125;)/g</span>,        <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">a, n</span>) </span>&#123;            <span class="hljs-keyword">return</span> m(<span class="hljs-string">&quot;0x&quot;</span> + n)        &#125;))&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">n_fun</span>(<span class="hljs-params">t</span>) </span>&#123;    <span class="hljs-keyword">var</span> n;    n = e_from(t.toString(), <span class="hljs-string">&quot;binary&quot;</span>) ;    <span class="hljs-keyword">return</span> q_fromByteArray(n) <span class="hljs-comment">// 这一处的代码相当于 n.toString(&quot;base64&quot;)</span>&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">e_from</span>(<span class="hljs-params">t_str, b</span>) </span>&#123;    <span class="hljs-keyword">var</span> r = t_str.length;    t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Uint8Array</span>(r);    <span class="hljs-keyword">var</span> i = t_write(t, t_str, b, r);    <span class="hljs-keyword">return</span> t&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">t_write</span>(<span class="hljs-params">t, e, b, r</span>) </span>&#123;    <span class="hljs-keyword">return</span> K(W(e), t, <span class="hljs-number">0</span>, r)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">K</span>(<span class="hljs-params">t, e, n, r</span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> j = <span class="hljs-number">0</span>; j &lt; r &amp;&amp; !(j + n &gt;= e.length || j &gt;= t.length); ++j) e[j + n] = t[j];    <span class="hljs-keyword">return</span> j&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">W</span>(<span class="hljs-params">t</span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e = [], n = <span class="hljs-number">0</span>; n &lt; t.length; ++n) e.push(<span class="hljs-number">255</span> &amp; t.charCodeAt(n));    <span class="hljs-keyword">return</span> e&#125;l = <span class="hljs-string">&quot;A,B,C,D,E,F,G,H,I,J,K,L,M,N,O,P,Q,R,S,T,U,V,W,X,Y,Z,a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p,q,r,s,t,u,v,w,x,y,z,0,1,2,3,4,5,6,7,8,9,+,/&quot;</span>l = l.split(<span class="hljs-string">&quot;,&quot;</span>)<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">q_fromByteArray</span>(<span class="hljs-params">t</span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> e, n = t.length,        r = n % <span class="hljs-number">3</span>,        i = <span class="hljs-string">&quot;&quot;</span>,        o = [], a = <span class="hljs-number">16383</span>, u = <span class="hljs-number">0</span>, c = n - r; u &lt; c; u += a) o.push(s(t, u, u + a &gt; c ? c : u + a));    <span class="hljs-keyword">return</span> <span class="hljs-number">1</span> === r ? (e = t[n - <span class="hljs-number">1</span>], i += l[e &gt;&gt; <span class="hljs-number">2</span>], i += l[e &lt;&lt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">63</span>], i += <span class="hljs-string">&quot;==&quot;</span>) : <span class="hljs-number">2</span> === r &amp;&amp; (e = (t[n - <span class="hljs-number">2</span>] &lt;&lt; <span class="hljs-number">8</span>) + t[n - <span class="hljs-number">1</span>], i += l[e &gt;&gt; <span class="hljs-number">10</span>], i += l[e &gt;&gt; <span class="hljs-number">4</span> &amp; <span class="hljs-number">63</span>], i += l[e &lt;&lt; <span class="hljs-number">2</span> &amp; <span class="hljs-number">63</span>], i += <span class="hljs-string">&quot;=&quot;</span>),        o.push(i),        o.join(<span class="hljs-string">&quot;&quot;</span>)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">s</span>(<span class="hljs-params">t, e, n</span>) </span>&#123;    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> r, i = [], o = e; o &lt; n; o += <span class="hljs-number">3</span>) r = (t[o] &lt;&lt; <span class="hljs-number">16</span> &amp; <span class="hljs-number">16711680</span>) + (t[o + <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-number">8</span> &amp; <span class="hljs-number">65280</span>) + (<span class="hljs-number">255</span> &amp; t[o + <span class="hljs-number">2</span>]),        i.push(a(r));    <span class="hljs-keyword">return</span> i.join(<span class="hljs-string">&quot;&quot;</span>)&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">a</span>(<span class="hljs-params">t</span>) </span>&#123;    <span class="hljs-keyword">return</span> l[t &gt;&gt; <span class="hljs-number">18</span> &amp; <span class="hljs-number">63</span>] + l[t &gt;&gt; <span class="hljs-number">12</span> &amp; <span class="hljs-number">63</span>] + l[t &gt;&gt; <span class="hljs-number">6</span> &amp; <span class="hljs-number">63</span>] + l[<span class="hljs-number">63</span> &amp; t]&#125;<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">get0analysis</span>(<span class="hljs-params">synct, params</span>) </span>&#123;    <span class="hljs-keyword">var</span> g = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() - <span class="hljs-number">1000</span> * synct;    <span class="hljs-keyword">var</span> e = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>() - g - <span class="hljs-number">1515125653845</span>;    <span class="hljs-keyword">var</span> analy = [];    <span class="hljs-keyword">var</span> palist = [];    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> key <span class="hljs-keyword">in</span> params) &#123;        palist.push(params[key])    &#125;    <span class="hljs-keyword">var</span> mm = palist[<span class="hljs-string">&quot;sort&quot;</span>]()[<span class="hljs-string">&quot;join&quot;</span>](<span class="hljs-string">&quot;&quot;</span>);    <span class="hljs-keyword">var</span> mmm = v(mm); <span class="hljs-comment">//参数mm先执行f(e)函数</span>    <span class="hljs-keyword">var</span> m_str1 = mmm + <span class="hljs-string">&#x27;@#/rank/indexPlus/brand_id/1@#57313212470@#1&#x27;</span>;    <span class="hljs-keyword">var</span> m_str0 = mmm + <span class="hljs-string">&#x27;@#/rank/indexPlus/brand_id/0@#57313212470@#0&#x27;</span>;    <span class="hljs-keyword">var</span> m_str2 = mmm + <span class="hljs-string">&#x27;@#/rank/indexPlus/brand_id/2@#57313212470@#2&#x27;</span>;    <span class="hljs-keyword">var</span> b_str = <span class="hljs-string">&quot;00000008d78d46a&quot;</span>;    <span class="hljs-keyword">var</span> r2 = v(C(m_str2, b_str));    <span class="hljs-keyword">var</span> r0 = v(C(m_str0, b_str));    <span class="hljs-keyword">var</span> r1 = v(C(m_str1, b_str)) ;    analy.push(r0, r1, r2);    <span class="hljs-keyword">return</span> analy&#125;</code></pre><h3><span id="python-xia-zai-jiao-ben">python下载脚本</span><a href="#python-xia-zai-jiao-ben" class="header-anchor"></a></h3><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><span class="hljs-keyword">import</span> requests, execjs,json<span class="hljs-keyword">import</span> random<span class="hljs-keyword">import</span> time, os<span class="hljs-keyword">import</span> pandas <span class="hljs-keyword">as</span> pduser_agent = [    <span class="hljs-string">&quot;Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&quot;</span>,    <span class="hljs-string">&quot;Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&quot;</span>,    <span class="hljs-string">&quot;Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5&quot;</span>,    <span class="hljs-string">&quot;Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&quot;</span>,    <span class="hljs-string">&quot;MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1&quot;</span>,    <span class="hljs-string">&quot;Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+&quot;</span>,    <span class="hljs-string">&quot;Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)&quot;</span>,    <span class="hljs-string">&quot;Mozilla/6.0 (iPhone; CPU iPhone OS 8_0 like Mac OS X) AppleWebKit/536.26 (KHTML, like Gecko) Version/8.0 Mobile/10A5376e Safari/8536.25&quot;</span>,    ]headers = &#123;    <span class="hljs-string">&quot;User-Agent&quot;</span>: random.choice(user_agent),    <span class="hljs-string">&#x27;Origin&#x27;</span>: <span class="hljs-string">&#x27;https://www.qimai.cn&#x27;</span>,    <span class="hljs-string">&#x27;Referer&#x27;</span>: <span class="hljs-string">&#x27;https://www.qimai.cn/rank&#x27;</span>,    <span class="hljs-string">&quot;Accept&quot;</span>: <span class="hljs-string">&quot;application/json,text/plain,*/*&quot;</span>,&#125;params = &#123;<span class="hljs-string">&#x27;brand&#x27;</span>: <span class="hljs-string">&#x27;all&#x27;</span>,          <span class="hljs-string">&#x27;country&#x27;</span>: <span class="hljs-string">&#x27;cn&#x27;</span>,          <span class="hljs-string">&#x27;device&#x27;</span>: <span class="hljs-string">&#x27;iphone&#x27;</span>,          <span class="hljs-string">&#x27;genre&#x27;</span>: <span class="hljs-string">&#x27;5000&#x27;</span>,          <span class="hljs-string">&#x27;date&#x27;</span>: <span class="hljs-string">&#x27;2020-8-31&#x27;</span>,          <span class="hljs-string">&#x27;page&#x27;</span>: <span class="hljs-number">2</span>          &#125;TRY_TIMES = <span class="hljs-number">10</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getAnalysis</span>():</span>    resp = requests.get(<span class="hljs-string">&#x27;https://www.qimai.cn/rank&#x27;</span>, headers=headers, verify=<span class="hljs-literal">False</span>)    t = resp.cookies.get_dict()    synct = t.get(<span class="hljs-string">&#x27;synct&#x27;</span>)<span class="hljs-comment">#时间</span>    print(<span class="hljs-string">&quot;current time is : &quot;</span> + synct)    ana = getanaly(synct)    <span class="hljs-keyword">return</span> ana<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getanaly</span>(<span class="hljs-params">synct</span>):</span>    js_path = <span class="hljs-string">&quot;qimai.js&quot;</span>    <span class="hljs-keyword">try</span>:        new_pwd = <span class="hljs-string">&quot;dummy&quot;</span>        <span class="hljs-keyword">with</span> open(js_path, <span class="hljs-string">&#x27;r&#x27;</span>,encoding=<span class="hljs-string">&#x27;utf8&#x27;</span>) <span class="hljs-keyword">as</span> f:            js_content = f.read()            ctx = execjs.compile(js_content)            new_pwd = ctx.call(<span class="hljs-string">&quot;get0analysis&quot;</span>, synct, params)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:        print(<span class="hljs-string">&quot;Exception when run js file....., will return dummy pwd&quot;</span>)    <span class="hljs-keyword">finally</span>:        print(<span class="hljs-string">&quot;getanaly result is: &quot;</span>, new_pwd)        <span class="hljs-keyword">return</span> new_pwd<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_ana_valid</span>(<span class="hljs-params">ana</span>):</span>    params[<span class="hljs-string">&#x27;analysis&#x27;</span>] = ana[<span class="hljs-number">0</span>]    print(<span class="hljs-string">&quot;params[&#x27;analysis&#x27;] = &quot;</span> + params[<span class="hljs-string">&#x27;analysis&#x27;</span>] )    <span class="hljs-comment"># params[&#x27;analysis&#x27;] = ana</span>    <span class="hljs-comment"># print(&quot;params[&#x27;analysis&#x27;] = &quot; + params[&#x27;analysis&#x27;])</span>    url = <span class="hljs-string">&#x27;https://api.qimai.cn/userRequest/index?&#x27;</span>    <span class="hljs-comment"># print(url)</span>    res = requests.get(url=url,headers=headers,params=params)    <span class="hljs-comment"># print(&quot;check_ana_valid res.text: &quot;, res.text)</span>    <span class="hljs-keyword">try</span>:        resjson = json.loads(res.text)        print(<span class="hljs-string">&quot;check ana result: &quot;</span> , resjson)        <span class="hljs-keyword">return</span>(resjson)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:        <span class="hljs-keyword">return</span><span class="hljs-string">&quot;&quot;</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">check_specifykey_specifymarket_exist</span>(<span class="hljs-params">ana, market, searchkey</span>):</span>    params[<span class="hljs-string">&#x27;analysis&#x27;</span>] = ana[<span class="hljs-number">1</span>]    params[<span class="hljs-string">&#x27;market&#x27;</span>] = market <span class="hljs-comment">#&#x27;6&#x27;</span>    params[<span class="hljs-string">&#x27;search&#x27;</span>] = searchkey <span class="hljs-comment"># &#x27;每团‘</span>    url = <span class="hljs-string">&#x27;https://api.qimai.cn/search/checkHasBundleId?&#x27;</span>    print(url)    res = requests.get(url=url,headers=headers,params=params)    print(<span class="hljs-string">&quot;check_specifykey_specifymarket_exist res.txt: &quot;</span>+ res.text)    <span class="hljs-keyword">try</span>:        resjson = json.loads(res.text)        print(resjson)        <span class="hljs-keyword">return</span> (resjson)    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># 查询pagenum页信息</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search_specifykey_specifymarket</span>(<span class="hljs-params">ana, market, searchkey, outfilename, keys, pagenum</span>):</span>    params[<span class="hljs-string">&#x27;analysis&#x27;</span>] = ana[<span class="hljs-number">1</span>]    params[<span class="hljs-string">&#x27;market&#x27;</span>] = market <span class="hljs-comment">#&#x27;6&#x27;</span>    params[<span class="hljs-string">&#x27;search&#x27;</span>] = searchkey <span class="hljs-comment"># &#x27;每团‘</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>,pagenum):        params[<span class="hljs-string">&#x27;page&#x27;</span>] = i        url = <span class="hljs-string">&#x27;https://api.qimai.cn/search/android?&#x27;</span>        print(url)        print(<span class="hljs-string">&quot;params: %s&quot;</span> % str(params))        res = requests.get(url=url,headers=headers,params=params)        print(<span class="hljs-string">&quot;search_specifykey_specifymarket res.txt: &quot;</span>+ res.text)        <span class="hljs-keyword">try</span>:            resjson = json.loads(res.text)            print(resjson)            <span class="hljs-keyword">if</span> str(resjson).strip() == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> str(resjson).strip().find(<span class="hljs-string">&quot;10602&quot;</span>) != <span class="hljs-number">-1</span>:                ana = getAna(TRY_TIMES)                search_specifykey_specifymarket(ana, market, searchkey, outfilename, keys, pagenum)            <span class="hljs-keyword">else</span>:                <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> resjson.get(<span class="hljs-string">&#x27;appList&#x27;</span>) <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:                    print(resjson.get(<span class="hljs-string">&#x27;appList&#x27;</span>)[<span class="hljs-number">0</span>])                    save_json_to_file(outfilename, resjson, keys)        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span><span class="hljs-comment"># save json data to file</span><span class="hljs-comment"># keys is filter, if keys value exist, don&#x27;t save</span><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save_json_to_file</span>(<span class="hljs-params">outfilename, jsondata, keys</span>):</span>    <span class="hljs-keyword">with</span> open(outfilename, <span class="hljs-string">&#x27;a+&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> f:        f.seek(<span class="hljs-number">0</span>)        lines = f.read().splitlines()        EXIST = <span class="hljs-literal">False</span>        newline = str(jsondata).strip()        <span class="hljs-keyword">try</span>:            newlinedict = eval(newline)        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:            newlinedict = &#123;&#125;            print(<span class="hljs-string">&quot;newline is :&quot;</span> + newline)        <span class="hljs-keyword">if</span> len(lines) == <span class="hljs-number">0</span>:            f.writelines(newline + <span class="hljs-string">&#x27;\n&#x27;</span>)        <span class="hljs-keyword">else</span>:            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> EXIST:                <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:                    <span class="hljs-keyword">try</span>:                        linedict = eval(line)                    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> ex:                        <span class="hljs-keyword">continue</span>                    <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> keys:                        cont = linedict.get(key)                        cont_newline = newlinedict.get(key)                        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cont_newline == cont:                            EXIST = <span class="hljs-literal">False</span>                            <span class="hljs-keyword">break</span>                        EXIST = <span class="hljs-literal">True</span>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> EXIST:                f.writelines(newline + <span class="hljs-string">&#x27;\n&#x27;</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download</span>(<span class="hljs-params">searchkey, markets, capture_page_numbers</span>):</span>    ana = getAna(TRY_TIMES)    <span class="hljs-comment"># 共10个android应用市场</span>    <span class="hljs-comment"># markets = &#123;&#x27;360&#x27;: &#x27;1&#x27;, &#x27;百度&#x27;: &#x27;2&#x27;, &#x27;应用宝&#x27;: &#x27;3&#x27;, &#x27;小米&#x27;: &#x27;4&#x27;, &#x27;豌豆荚&#x27;: &#x27;5&#x27;, &#x27;华为&#x27;: &#x27;6&#x27;, &#x27;魅族&#x27;: &#x27;7&#x27;, &#x27;VIVO&#x27;: &#x27;8&#x27;, &#x27;OPPO&#x27;: &#x27;9&#x27;,</span>    <span class="hljs-comment">#            &#x27;gogoleplay&#x27;: &#x27;10&#x27;&#125;  #共10个android应用市场</span>    <span class="hljs-keyword">for</span> market_name <span class="hljs-keyword">in</span> markets.keys():        market_id = markets.get(market_name)        <span class="hljs-comment"># jsondata2 = check_specifykey_specifymarket_exist(ana, market, searchkey)</span>        <span class="hljs-comment"># save_json_to_file(&quot;test.txt&quot;, jsondata2, [&quot;code&quot;, &quot;msg&quot;])</span>        outfilename = searchkey + <span class="hljs-string">&quot;_market_&quot;</span> + market_name + <span class="hljs-string">&quot;.txt&quot;</span>        search_specifykey_specifymarket(ana, market_id, searchkey, outfilename, [], capture_page_numbers)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getAna</span>(<span class="hljs-params">trytimes</span>):</span>    ana = getAnalysis()    jsondata1 = check_ana_valid(ana)    <span class="hljs-comment"># newline = str(jsondata1).strip()</span>    <span class="hljs-keyword">while</span> str(jsondata1).strip() == <span class="hljs-string">&#x27;&#x27;</span> <span class="hljs-keyword">or</span> str(jsondata1).strip().find(<span class="hljs-string">&quot;10602&quot;</span>) != <span class="hljs-number">-1</span>:        <span class="hljs-keyword">if</span> str(jsondata1).strip().find(<span class="hljs-string">&#x27;Access Error&#x27;</span>) != <span class="hljs-number">-1</span>:            print(<span class="hljs-string">&quot;Current try time is No.: &quot;</span>, str(TRY_TIMES - trytimes), <span class="hljs-string">&quot;. Please wait 10 secs&quot;</span>)            time.sleep(<span class="hljs-number">10</span>)        <span class="hljs-keyword">elif</span> str(jsondata1).strip().find(<span class="hljs-string">&#x27;请半小时后重试&#x27;</span>) != <span class="hljs-number">-1</span>:            print(<span class="hljs-string">&quot;Current try time is No.: &quot;</span>, str(TRY_TIMES - trytimes), <span class="hljs-string">&quot;. Please wait 30 mins&quot;</span>)            time.sleep(<span class="hljs-number">1850</span>)        ana = getAnalysis()        jsondata1 = check_ana_valid(ana)        trytimes -= <span class="hljs-number">1</span>        <span class="hljs-keyword">if</span> trytimes == <span class="hljs-number">0</span>:            <span class="hljs-keyword">break</span>    save_json_to_file(<span class="hljs-string">&quot;check_ana_valid.txt&quot;</span>, jsondata1, [<span class="hljs-string">&quot;code&quot;</span>, <span class="hljs-string">&quot;msg&quot;</span>])    <span class="hljs-keyword">return</span> ana<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">json_to_excel</span>(<span class="hljs-params">text</span>):</span>    df = pd.DataFrame()  <span class="hljs-comment"># 最后转换得到的结果</span>    df1 = pd.DataFrame([text])    df = df.append(df1)    df.to_excel(<span class="hljs-string">&#x27;data.xlsx&#x27;</span>, sheet_name=<span class="hljs-string">&#x27;Data&#x27;</span>, startcol=<span class="hljs-number">0</span>, index=<span class="hljs-literal">False</span>)<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">json_file_cont_to_excel_special</span>(<span class="hljs-params">inputdata, outputfile</span>):</span>    print(<span class="hljs-string">&quot;will generate &#123;outputfile&#125; base on &#123;inputdata&#125;&quot;</span>.format(outputfile=outputfile,inputdata=inputdata))    data = []  <span class="hljs-comment"># 用于存储每一行的数据</span>    <span class="hljs-keyword">with</span> open(inputdata, <span class="hljs-string">&#x27;r&#x27;</span>, encoding=<span class="hljs-string">&#x27;UTF-8&#x27;</span>) <span class="hljs-keyword">as</span> fr:        <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> fr:            data.append(line)    df = pd.DataFrame()  <span class="hljs-comment"># 最后转换得到的结果</span>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> data:        <span class="hljs-comment">#每行的数据转为json格式，再转为dataframe格式</span>        line_json = eval(line)        applist_cont_list = line_json.get(<span class="hljs-string">&#x27;appList&#x27;</span>)        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> applist_cont_list:            info = &#123;&#125;            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;appInfo&#x27;</span> <span class="hljs-keyword">in</span> i.keys():                info.update(i.get(<span class="hljs-string">&#x27;appInfo&#x27;</span>))            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;company&#x27;</span> <span class="hljs-keyword">in</span> i.keys():                info.update(i.get(<span class="hljs-string">&#x27;company&#x27;</span>))            <span class="hljs-keyword">if</span> <span class="hljs-string">&#x27;rankInfo&#x27;</span> <span class="hljs-keyword">in</span> i.keys():                info.update(i.get(<span class="hljs-string">&#x27;rankInfo&#x27;</span>))            df1 = pd.DataFrame(info,index=[<span class="hljs-number">0</span>])            <span class="hljs-comment"># df1 = pd.DataFrame.from_dict(info,orient=&#x27;index&#x27;).T</span>            df = df.append(df1)    sheet_name = inputdata[:inputdata.find(<span class="hljs-string">&#x27;.&#x27;</span>)]    df.to_excel(outputfile, sheet_name=sheet_name, startcol=<span class="hljs-number">0</span>, index=<span class="hljs-literal">False</span>)    print(<span class="hljs-string">&quot;generated &#123;outputfile&#125; base on &#123;inputdata&#125; finish&quot;</span>.format(outputfile =outputfile,inputdata=inputdata))<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert_result_to_one_excel</span>(<span class="hljs-params">excelfilename</span>):</span>    list_file = os.listdir(<span class="hljs-string">&#x27;./&#x27;</span>)    write = pd.ExcelWriter(excelfilename)    <span class="hljs-keyword">for</span> contentfile <span class="hljs-keyword">in</span> list_file:        name = os.path.splitext(contentfile)[<span class="hljs-number">0</span>]        suffix = os.path.splitext(contentfile)[<span class="hljs-number">1</span>]        <span class="hljs-keyword">if</span> suffix == <span class="hljs-string">&#x27;.txt&#x27;</span> <span class="hljs-keyword">and</span> name.find(<span class="hljs-string">&#x27;_market&#x27;</span>) != <span class="hljs-number">-1</span>:            json_file_cont_to_excel_special(contentfile, write)    write.save()<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">convert_result_to_multi_excels</span>():</span>    list_file = os.listdir(<span class="hljs-string">&#x27;./&#x27;</span>)    <span class="hljs-keyword">for</span> contentfile <span class="hljs-keyword">in</span> list_file:        name = os.path.splitext(contentfile)[<span class="hljs-number">0</span>]        suffix = os.path.splitext(contentfile)[<span class="hljs-number">1</span>]        <span class="hljs-keyword">if</span> suffix == <span class="hljs-string">&#x27;.txt&#x27;</span> <span class="hljs-keyword">and</span> name.find(<span class="hljs-string">&#x27;_market&#x27;</span>) != <span class="hljs-number">-1</span>:            output_excel_name = name + <span class="hljs-string">&#x27;.xls&#x27;</span>            json_file_cont_to_excel_special(contentfile, output_excel_name)<span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&quot;__main__&quot;</span>:    searchkeys = [<span class="hljs-string">&#x27;拜佛&#x27;</span>, <span class="hljs-string">&#x27;佛教&#x27;</span>]    markets = &#123;<span class="hljs-string">&#x27;360&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-string">&#x27;百度&#x27;</span>: <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-string">&#x27;应用宝&#x27;</span>: <span class="hljs-string">&#x27;3&#x27;</span>, <span class="hljs-string">&#x27;小米&#x27;</span>: <span class="hljs-string">&#x27;4&#x27;</span>, <span class="hljs-string">&#x27;豌豆荚&#x27;</span>: <span class="hljs-string">&#x27;5&#x27;</span>, <span class="hljs-string">&#x27;华为&#x27;</span>: <span class="hljs-string">&#x27;6&#x27;</span>, <span class="hljs-string">&#x27;魅族&#x27;</span>: <span class="hljs-string">&#x27;7&#x27;</span>, <span class="hljs-string">&#x27;VIVO&#x27;</span>: <span class="hljs-string">&#x27;8&#x27;</span>, <span class="hljs-string">&#x27;OPPO&#x27;</span>: <span class="hljs-string">&#x27;9&#x27;</span>,               <span class="hljs-string">&#x27;gogoleplay&#x27;</span>: <span class="hljs-string">&#x27;10&#x27;</span>&#125;  <span class="hljs-comment"># 共10个android应用市场</span>    capture_page_numbers = <span class="hljs-number">5</span>    <span class="hljs-keyword">for</span> searchkey <span class="hljs-keyword">in</span> searchkeys:        download(searchkey, markets, capture_page_numbers)    out_excel_filename = <span class="hljs-string">&quot;android.xls&quot;</span>    convert_result_to_one_excel(out_excel_filename)    <span class="hljs-comment"># convert_result_to_multi_excels()</span></code></pre><h3><span id="yun-xing-ri-zhi-xin-xi-ji-zui-zhong-jie-guo-zhan-shi">运行日志信息及最终结果展示</span><a href="#yun-xing-ri-zhi-xin-xi-ji-zui-zhong-jie-guo-zhan-shi" class="header-anchor"></a></h3><h4><span id="ri-zhi">日志:</span><a href="#ri-zhi" class="header-anchor"></a></h4><img src="/2020/09/17/2020-09-17-Spider-Qimai-Rank/2020-09-16-qimai_full_log.png" class><h4><span id="jie-guo-wen-jian">结果文件</span><a href="#jie-guo-wen-jian" class="header-anchor"></a></h4><img src="/2020/09/17/2020-09-17-Spider-Qimai-Rank/2020-09-16-qimai_sample_result_file.png" class><h4><span id="txt-jie-guo-nei-rong-shi-li">txt结果内容示例</span><a href="#txt-jie-guo-nei-rong-shi-li" class="header-anchor"></a></h4><pre><code class="hljs 1c">&#123;&#x27;code&#x27;: <span class="hljs-number">10000</span>, &#x27;msg&#x27;: &#x27;成功&#x27;, &#x27;isActualAndroid&#x27;: <span class="hljs-number">0</span>, &#x27;wechatList&#x27;: [], &#x27;isSearch&#x27;: True, &#x27;totalNum&#x27;: &#x27;20&#x27;, &#x27;maxPage&#x27;: <span class="hljs-number">1</span>, &#x27;offlineAppInfo&#x27;: False, &#x27;appList&#x27;: [&#123;&#x27;appInfo&#x27;: &#123;&#x27;appId&#x27;: &#x27;<span class="hljs-number">164404</span>&#x27;, &#x27;appName&#x27;: &#x27;拜佛&#x27;, &#x27;icon&#x27;: &#x27;https://static-cdn.qimai.cn/pic/view/type/android/source/aHR0cDovL3AyLnFoaW1nLmNvbS90MDE5ZjU2NTY3YWNkZmZjMmFmLndlYnA=&#x27;, &#x27;publisher&#x27;: &#x27;深圳市功德文化有限公司&#x27;, &#x27;comment_score&#x27;: <span class="hljs-number">1</span>, &#x27;comment_count&#x27;: <span class="hljs-number">260</span>, &#x27;version_time&#x27;: &#x27;<span class="hljs-number">2020-06-23</span>&#x27;, &#x27;app_download_num&#x27;: &#x27;<span class="hljs-number">196454</span>&#x27;&#125;, &#x27;genre&#x27;: &#x27;常用工具&#x27;, &#x27;isMyApp&#x27;: <span class="hljs-number">0</span>, &#x27;company&#x27;: &#123;&#x27;id&#x27;: &#x27;<span class="hljs-number">1186</span>3&#x27;, &#x27;name&#x27;: &#x27;深圳市聚英杰科技有限公司&#x27;&#125;, &#x27;rankInfo&#x27;: &#123;&#x27;ranking&#x27;: <span class="hljs-number">0</span>, &#x27;change&#x27;: <span class="hljs-number">0</span>, &#x27;genre&#x27;: &#x27;游戏&#x27;&#125;&#125;, &#123;&#x27;appInfo&#x27;: &#123;&#x27;appId&#x27;: &#x27;<span class="hljs-number">132294</span>&#x27;, &#x27;appName&#x27;: &#x27;怀恩菩提心&#x27;, &#x27;icon&#x27;: &#x27;https://static-cdn.qimai.cn/pic/view/type/android/source/aHR0cDovL3AyLnFoaW1nLmNvbS90MDE0NzVkNjRhMGRhM2M2Njc0LndlYnA=&#x27;, &#x27;publisher&#x27;: &#x27;上海怀恩网络科技有限公司&#x27;, &#x27;comment_score&#x27;: <span class="hljs-number">1</span>, &#x27;comment_count&#x27;: <span class="hljs-number">664</span>, &#x27;version_time&#x27;: &#x27;<span class="hljs-number">2019-12-11</span>&#x27;, &#x27;app_download_num&#x27;: &#x27;<span class="hljs-number">362645</span>&#x27;&#125;, &#x27;genre&#x27;: &#x27;常用工具&#x27;, &#x27;isMyApp&#x27;: <span class="hljs-number">0</span>, &#x27;company&#x27;: &#123;&#x27;id&#x27;: &#x27;<span class="hljs-number">4988</span>0&#x27;, &#x27;name&#x27;: &#x27;上海怀恩网络科技有限公司&#x27;&#125;, &#x27;rankInfo&#x27;: &#123;&#x27;ranking&#x27;: <span class="hljs-number">0</span>, &#x27;change&#x27;: <span class="hljs-number">0</span>, &#x27;genre&#x27;: &#x27;游戏&#x27;&#125;&#125;, &#123;&#x27;appInfo&#x27;: &#123;&#x27;appId&#x27;: &#x27;<span class="hljs-number">132096</span>&#x27;, &#x27;appName&#x27;: &#x27;修行者&#x27;, &#x27;icon&#x27;: &#x27;https://static-cdn.qimai.cn/pic/view/type/android/source/aHR0cDovL3AyLnFoaW1nLmNvbS90MDE2OTUxNmM5YTZjNWVhNzdjLndlYnA=&#x27;, &#x27;publisher&#x27;: &#x27;广东灵机文化传播有限公司&#x27;, &#x27;comment_score&#x27;: <span class="hljs-number">0.9</span>, &#x27;comment_count&#x27;: <span class="hljs-number">169</span>, &#x27;version_time&#x27;: &#x27;<span class="hljs-number">2018-07-19</span>&#x27;, &#x27;app_download_num&#x27;: &#x27;<span class="hljs-number">693930</span>&#x27;&#125;, &#x27;genre&#x27;: &#x27;生活服务&#x27;, &#x27;isMyApp&#x27;: <span class="hljs-number">0</span>, &#x27;company&#x27;: &#123;&#x27;id&#x27;: &#x27;863&#x27;, &#x27;name&#x27;: &#x27;广东亿俊计算机系统有限公司&#x27;&#125;, &#x27;rankInfo&#x27;: &#123;&#x27;ranking&#x27;: <span class="hljs-number">0</span>, &#x27;change&#x27;: <span class="hljs-number">0</span>, &#x27;genre&#x27;: &#x27;游戏&#x27;&#125;&#125;]&#125;</code></pre><h4><span id="excel-jie-guo-nei-rong-shi-li">excel结果内容示例</span><a href="#excel-jie-guo-nei-rong-shi-li" class="header-anchor"></a></h4><img src="/2020/09/17/2020-09-17-Spider-Qimai-Rank/2020-09-16-qimai_sample_result_excel.png" class><h3><span id="shuo-ming">说明</span><a href="#shuo-ming" class="header-anchor"></a></h3><ol><li>下载后，会根据关键字、平台把结果存入多个不同的txt文件中</li><li>方便查看，最后会把txt格式转为excel格式：可以通过调整下面代码实现把结果存放到同一个excel或多个分开的excel</li></ol><pre><code class="hljs stylus">#存到同一个excel文件<span class="hljs-function"><span class="hljs-title">convert_result_to_one_excel</span><span class="hljs-params">(out_excel_filename)</span></span>#存到多个分开的excel文件<span class="hljs-function"><span class="hljs-title">convert_result_to_multi_excels</span><span class="hljs-params">()</span></span></code></pre><ol start="3"><li>经常会下载是获取不到信息，多等一段时间即可。同时发现，没有获取到正确的analysis亦可爬取到结果</li></ol><p><a href="https://github.com/zhenzhang20/Qimai_Rank">Fork/Star on Github</a></p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
      <tag>七麦</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用攻略-Coding GitHub双解析</title>
    <link href="/2020/08/28/2020-08-28-Coding_Deploy/"/>
    <url>/2020/08/28/2020-08-28-Coding_Deploy/</url>
    
    <content type="html"><![CDATA[<p>之前将博客部署到了Github上，但是由于网络的原因导致网站有时候无法访问，这时候的解决办法是将博客部署到两个服务器上，国外访问时使用Github上的项目，国内访问时使用本文介绍的Coding上</p><h3><span id="xiu-gai-cang-ku-wei-ssh-fang-shi-bing-fu-zhi-ssh-di-zhi">修改仓库为ssh方式并复制ssh地址</span><a href="#xiu-gai-cang-ku-wei-ssh-fang-shi-bing-fu-zhi-ssh-di-zhi" class="header-anchor"></a></h3><p>在coding网站上，修改仓库设置为ssh方式， 并复制ssh地址。如下：</p><img src="/2020/08/28/2020-08-28-Coding_Deploy/2020-08-28-coding_repository_setting.png" class title="coding_repository_setting"><h3><span id="pei-zhi-config-yml">配置_config.yml</span><a href="#pei-zhi-config-yml" class="header-anchor"></a></h3><p>打开博客目录的_config.yml，修改deploy部分设置，增加coding仓库ssh地址</p><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:  <span class="hljs-attribute">type</span>: git  <span class="hljs-attribute">repo</span>:     <span class="hljs-attribute">github</span>: git<span class="hljs-variable">@github</span>.<span class="hljs-attribute">com</span>:zhenzhang20/zhenzhang20.github.io.git,master #修改成自己的项目地址    <span class="hljs-attribute">coding</span>: git<span class="hljs-variable">@e</span>.coding.<span class="hljs-attribute">net</span>:zhen_zhang20/blog/blog.git,master #修改成自己的项目地址</code></pre><h3><span id="zhi-xing-hexo-zhi-ling-shang-chuan-dai-ma-fa-bu">执行hexo 指令上传代码（发布）</span><a href="#zhi-xing-hexo-zhi-ling-shang-chuan-dai-ma-fa-bu" class="header-anchor"></a></h3><pre><code class="hljs properties"><span class="hljs-attr">hexo</span> <span class="hljs-string">clean</span><span class="hljs-attr">hexo</span> <span class="hljs-string">g</span><span class="hljs-attr">hexo</span> <span class="hljs-string">d</span></code></pre><p>如果遇到报错：</p><pre><code class="hljs lsl">The authenticity of host &#x27;e.coding.net (<span class="hljs-number">118.126</span><span class="hljs-number">.70</span><span class="hljs-number">.252</span>)&#x27; can&#x27;t be established.</code></pre><p>先通过git bash运行 ssh -T <a href="mailto:&#x67;&#x69;&#116;&#64;&#101;&#x2e;&#99;&#x6f;&#x64;&#105;&#x6e;&#103;&#46;&#110;&#x65;&#116;">&#x67;&#x69;&#116;&#64;&#101;&#x2e;&#99;&#x6f;&#x64;&#105;&#x6e;&#103;&#46;&#110;&#x65;&#116;</a> 并输入yes进行确认。然后再hexo d 提交即可通过</p><pre><code class="hljs vhdl">Administrator@GOS-<span class="hljs-number">01709151419</span> MINGW64 ~/Desktop$  ssh -T git@e.coding.netThe authenticity <span class="hljs-keyword">of</span> host <span class="hljs-symbol">&#x27;e</span>.coding.net (<span class="hljs-number">118.126</span>.<span class="hljs-number">70.252</span>)&#x27; can<span class="hljs-symbol">&#x27;t</span> be established.RSA key fingerprint <span class="hljs-keyword">is</span> SHA256:jok3FH7q5LJ6qvE7iPNehBgXRw51ErE77S0Dn+Vg/Ik.Are you sure you want <span class="hljs-keyword">to</span> continue connecting (yes/no/[fingerprint])? yes<span class="hljs-literal">Warning</span>: Permanently added <span class="hljs-symbol">&#x27;e</span>.coding.net&#x27; (RSA) <span class="hljs-keyword">to</span> the list <span class="hljs-keyword">of</span> known hosts.Coding 提示: Hello zhen_zhang20, You<span class="hljs-symbol">&#x27;ve</span> connected <span class="hljs-keyword">to</span> Coding.net via SSH. This <span class="hljs-keyword">is</span> a personal key.zhen_zhang20，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个个人公钥.公钥指纹：af:<span class="hljs-number">2</span>a:bb:fc:<span class="hljs-number">52</span>:d2:ad:<span class="hljs-number">03</span>:eb:f6:<span class="hljs-number">87</span>:<span class="hljs-number">55</span>:<span class="hljs-number">59</span>:<span class="hljs-number">8</span>b:<span class="hljs-number">29</span>:c6</code></pre><h3><span id="bu-shu-she-zhi">部署设置</span><a href="#bu-shu-she-zhi" class="header-anchor"></a></h3><p>检查coding上代码是否提交完成</p><img src="/2020/08/28/2020-08-28-Coding_Deploy/2020-08-28-coding_repository_code.png" class title="coding_repository_code"><p>打开“持续部署”功能</p><img src="/2020/08/28/2020-08-28-Coding_Deploy/2020-08-28-coding_continue_deploy.png" class title="coding_continue_deploy"><p>选择“持续部署”下的”静态网站“选项。</p><img src="/2020/08/28/2020-08-28-Coding_Deploy/2020-08-28-coding_continue_deploy_static.png" class title="coding_continue_deploy_static"><p>根据提示进行“实名认证”</p><img src="/2020/08/28/2020-08-28-Coding_Deploy/2020-08-28-coding_continue_deploy_identify.png" class title="coding_continue_deploy_identify"><p>创建静态网站设置</p><img src="/2020/08/28/2020-08-28-Coding_Deploy/2020-08-28-coding_continue_deploy_create.png" class title="coding_continue_deploy_create"><p>点击“立即部署”进行发布</p><img src="/2020/08/28/2020-08-28-Coding_Deploy/2020-08-28-coding_continue_deploy_ready.png" class title="coding_continue_deploy_ready"><p>发布后，访问“访问地址”的链接，可以正常访问博客网站</p><h3><span id="geng-huan-yu-ming">更换域名</span><a href="#geng-huan-yu-ming" class="header-anchor"></a></h3><p>登录阿里云域名解析设置页面</p><p>暂停github.io 及相应IP地址解析</p><img src="/2020/08/28/2020-08-28-Coding_Deploy/2020-08-28-github_stop_mapping.png" class title="github_stop_mapping"><p>选择“添加记录”。</p><p>第一条：记录CNAME型，主机记录为“@”，记录值为个人在coding-pages.com站点的二级域名”wt7yy3.coding-pages.com”</p><p>第二条：记录CNAME型，主机记录为“www”，记录值为个人在coding-pages.com站点的二级域名”wt7yy3.coding-pages.com”</p><p>同时添加两条记录可保证无论是否添加www都可以访问到目标地址。</p><img src="/2020/08/28/2020-08-28-Coding_Deploy/2020-08-28-aliyun_domain_add_record.png" class title="aliyun_domain_add_record"><p>添加完后后内容如下：</p><img src="/2020/08/28/2020-08-28-Coding_Deploy/2020-08-28-aliyun_domain_add_record_finish.png" class title="aliyun_domain_add_record_finish"><p>在Coding静态网站—&gt;自定义域名，输入要绑定的域名，添加绑定，并强制开启https访问</p><img src="/2020/08/28/2020-08-28-Coding_Deploy/2020-08-28-coding_bind_domain.png" class title="coding_bind_domain"><h3><span id="qi-yong-coding-github-shuang-jie-xi">启用Coding Github双解析</span><a href="#qi-yong-coding-github-shuang-jie-xi" class="header-anchor"></a></h3><img src="/2020/08/28/2020-08-28-Coding_Deploy/2020-08-28-multi_domain_mapping.png" class title="multi_domain_mapping"><h3><span id="ci-shi-ke-yi-zheng-chang-liu-lan-wang-zhan">此时可以正常浏览网站</span><a href="#ci-shi-ke-yi-zheng-chang-liu-lan-wang-zhan" class="header-anchor"></a></h3>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Hexo</tag>
      
      <tag>Coding</tag>
      
      <tag>域名</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过SSH访问Coding设置</title>
    <link href="/2020/08/27/2020-08-27-Coding-SSH-Setting/"/>
    <url>/2020/08/27/2020-08-27-Coding-SSH-Setting/</url>
    
    <content type="html"><![CDATA[<p>使用SSH密钥，您可以在每次访问时无需提供用户名或密码即可连接到Coding网站。</p><h3><span id="zai-coding-chuang-jian-gong-kai-xiang-mu">在Coding创建公开项目</span><a href="#zai-coding-chuang-jian-gong-kai-xiang-mu" class="header-anchor"></a></h3><p>首先我们先要创建一个coding账号并且在coding上创建一个项目,必须要是公开项目，项目名称可以随意选用 </p><ol><li>项目模板选择“代码托管项目”</li></ol><img src="/2020/08/27/2020-08-27-Coding-SSH-Setting/2020-08-27-coding_template_code.png" class title="coding_template_code"><ol start="2"><li>项目名称根据需求填写，没有要求</li></ol><img src="/2020/08/27/2020-08-27-Coding-SSH-Setting/2020-08-27-coding_create_project.png" class title="coding_create_project"><h3><span id="chang-shi-shi-yong-ssh-fang-wen-coding">尝试使用ssh访问Coding</span><a href="#chang-shi-shi-yong-ssh-fang-wen-coding" class="header-anchor"></a></h3><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@coding</span>.net</code></pre><p>在设置ssh授权之前，会提示：can’t be established.</p><pre><code class="hljs scala"><span class="hljs-type">Administrator</span><span class="hljs-meta">@GOS</span><span class="hljs-number">-01709151419</span> <span class="hljs-type">MINGW64</span> ~/.ssh$ ssh -<span class="hljs-type">T</span> git<span class="hljs-meta">@coding</span>.net<span class="hljs-type">The</span> authenticity of host <span class="hljs-symbol">&#x27;coding</span>.net (<span class="hljs-number">118.126</span><span class="hljs-number">.70</span><span class="hljs-number">.252</span>)&#x27; can<span class="hljs-symbol">&#x27;t</span> be established.<span class="hljs-type">RSA</span> key fingerprint is <span class="hljs-type">SHA256</span>:jok3FH7q5LJ6qvE7iPNehBgXRw51ErE77S0Dn+<span class="hljs-type">Vg</span>/<span class="hljs-type">Ik</span>.<span class="hljs-type">Are</span> you sure you want to <span class="hljs-keyword">continue</span> connecting (yes/no/[fingerprint])? yes<span class="hljs-type">Warning</span>: <span class="hljs-type">Permanently</span> added <span class="hljs-symbol">&#x27;coding</span>.net,<span class="hljs-number">118.126</span><span class="hljs-number">.70</span><span class="hljs-number">.252</span>&#x27; (<span class="hljs-type">RSA</span>) to the list of known hosts.git<span class="hljs-meta">@coding</span>.net: <span class="hljs-type">Permission</span> denied (publickey).</code></pre><h3><span id="jian-cha-ben-di-shi-fou-cun-zai-ssh-keys">检查本地是否存在ssh keys</span><a href="#jian-cha-ben-di-shi-fou-cun-zai-ssh-keys" class="header-anchor"></a></h3><ol start="3"><li><p>打开Git Bash，输入以下命令：</p><pre><code class="hljs bash">ls -al ~/.ssh</code></pre></li></ol><p>如果ssh文件夹内有类似id_rsa.pub的文件，代表你的本地已经拥有了ssh keys，那么你可以直接跳过生成ssh keys的步骤。</p><h3><span id="sheng-cheng-yi-ge-xin-de-ssh-key">生成一个新的ssh key</span><a href="#sheng-cheng-yi-ge-xin-de-ssh-key" class="header-anchor"></a></h3><ol start="4"><li>打开Git Bash，输入以下命令：</li></ol><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span></code></pre><p>此处需要你填写的邮箱，这个邮箱地址是个注释（标识），没有任何实质作用。建议填写个人邮箱作为注释。</p><pre><code>会有三个提示，直接按回车即可。最终信息类似如下：</code></pre><pre><code class="hljs properties"><span class="hljs-meta">Administrator@GOS-11709151419</span> <span class="hljs-string">MINGW64 ~</span><span class="hljs-meta">$</span> <span class="hljs-string">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><span class="hljs-attr">Generating</span> <span class="hljs-string">public/private rsa key pair.</span><span class="hljs-attr">Enter</span> <span class="hljs-string">file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):</span><span class="hljs-attr">Enter</span> <span class="hljs-string">passphrase (empty for no passphrase):</span><span class="hljs-attr">Enter</span> <span class="hljs-string">same passphrase again:</span><span class="hljs-attr">Your</span> <span class="hljs-string">identification has been saved in /c/Users/Administrator/.ssh/id_rsa</span><span class="hljs-attr">Your</span> <span class="hljs-string">public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub</span><span class="hljs-attr">The</span> <span class="hljs-string">key fingerprint is:</span><span class="hljs-attr">SHA256</span>:<span class="hljs-string">UDZ6Tpa1DZgBgCM+rT94d41+tfgFWdAdJcRqcrhAuNU your_email@example.com</span><span class="hljs-attr">The</span> <span class="hljs-string">key&#x27;s randomart image is:</span><span class="hljs-meta">+---[RSA</span> <span class="hljs-string">4096]----+</span><span class="hljs-meta">|</span>   <span class="hljs-string">....o==o..o+.+|</span><span class="hljs-attr">+----[SHA256]-----+</span></code></pre><ol start="5"><li>复制id_rsa.pub中内容，将作为ssh key粘贴到Coding上。</li></ol><h3><span id="jiang-ssh-mi-yao-jia-ru-ni-de-coding-zhang-hu-zhong">将SSH密钥加入你的Coding账户中</span><a href="#jiang-ssh-mi-yao-jia-ru-ni-de-coding-zhang-hu-zhong" class="header-anchor"></a></h3><ol start="6"><li>登录Coding账号，点击右上角的头像图标，点击”个人账户设置”，再点击左侧栏里面的<strong>SSH公钥</strong>，然后点击右侧“新增公钥”</li></ol><ol start="7"><li>把复制的id_rsa.pub中内容粘贴到“公钥内容”栏中。“公钥名称”为标识，可以任意填写。如：</li></ol><img src="/2020/08/27/2020-08-27-Coding-SSH-Setting/2020-08-27-coding_add_ssh_key.png" class title="coding_add_ssh_key"><ol start="6"><li>添加后，再次尝试使用ssh访问Coding则显示为：</li></ol><pre><code class="hljs reasonml">Administrator@GOS-<span class="hljs-number">01709151419</span> MINGW64 ~/.ssh$ ssh -T git@coding.netCoding 提示: Hello YourAccountName, You&#x27;ve connected <span class="hljs-keyword">to</span> <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Coding</span>.</span></span>net via SSH. This is a personal key.YourAccountName，你好，你已经通过 SSH 协议认证 <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Coding</span>.</span></span>net 服务，这是一个个人公钥.公钥指纹：af:<span class="hljs-number">2</span>a:ba:fc:<span class="hljs-number">51</span>:d2:ad:<span class="hljs-number">03</span>:eb:f6:<span class="hljs-number">87</span>:<span class="hljs-number">55</span>:<span class="hljs-number">58</span>:<span class="hljs-number">8</span>b:<span class="hljs-number">29</span>:c5</code></pre><p>此时，完成SSH访问Coding设置</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>SSH</tag>
      
      <tag>Coding</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>抖音视频下载器_v2020.2.0</title>
    <link href="/2020/08/25/2020-08-25-Douyin-Downloader/"/>
    <url>/2020/08/25/2020-08-25-Douyin-Downloader/</url>
    
    <content type="html"><![CDATA[<p>DYDownloader是一个简单的界面化下载指定抖音up主所有视频的程序。使用者超过100人后，将公开源码~~</p><h3><span id="xia-zai-yan-shi">下载演示</span><a href="#xia-zai-yan-shi" class="header-anchor"></a></h3><img src="/2020/08/25/2020-08-25-Douyin-Downloader/2020-08-25-download_demo.gif" class title="download_demo"><p><a href="https://pan.baidu.com/s/1nhSxX05rcaETFG1oPc3oPg">下载地址</a>  提取码：1234</p><img src="/2020/08/25/2020-08-25-Douyin-Downloader/2020-08-25-panbaidu_download_qr.png" class title="panbaidu_download_qr"><h3><span id="an-zhuang-yun-xing-huan-jing">安装运行环境</span><a href="#an-zhuang-yun-xing-huan-jing" class="header-anchor"></a></h3><ol><li><p>安装<a href="https://www.python.org/downloads/release/python-377/">Python3.7</a></p></li><li><p>安装本项目依赖库</p></li></ol><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> requirements.txt</code></pre><p>如果安装失败，请多次尝试或更换网络环境进行安装。</p><h3><span id="cheng-xu-shi-yong-fang-fa">程序使用方法</span><a href="#cheng-xu-shi-yong-fang-fa" class="header-anchor"></a></h3><ol><li>使用Python打开DYDownloader程序。</li></ol><pre><code class="hljs reasonml">python <span class="hljs-module-access"><span class="hljs-module"><span class="hljs-identifier">Download</span>.</span></span>pyc</code></pre><ol><li><p>正常启动后，界面为： </p><img src="/2020/08/25/2020-08-25-Douyin-Downloader/2020-08-25-dy_downloader_main_window.png" class title="dy_downloader_main_window"></li><li><p>点击界面右上角“开启本地服务”来打开所需服务</p></li></ol><p>本程序使用了Chrome浏览器内核进行模拟访问。首次使用时，会下载安装相应的文件，该过程在不同网络状态下，可能会比较慢，也可能安装失败。失败信息：</p><pre><code class="hljs angelscript">[WinError <span class="hljs-number">10060</span>] 由于连接方在一段时间后没有正确答复或连接的主机没有反应,连接尝试失败。</code></pre><p>如果自动安装失败，可以手动进行安装。安装方法： 从<a href="https://storage.googleapis.com/chromium-browser-snapshots/Win_x64/575458/chrome-win32.zip">googleapis官方</a>或者 <a href="https://npm.taobao.org/mirrors/chromium-browser-snapshots/Win_x64/575458/chrome-win32.zip">淘宝镜像网站</a>下载575458版本的chrome-win32.zip</p><p>下载后，解压缩到下述目录：</p><pre><code class="hljs taggerscript">C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\N</span>ame<span class="hljs-symbol">\A</span>ppData<span class="hljs-symbol">\L</span>ocal<span class="hljs-symbol">\p</span>yppeteer<span class="hljs-symbol">\p</span>yppeteer<span class="hljs-symbol">\l</span>ocal-chromium<span class="hljs-symbol">\5</span>75458<span class="hljs-symbol">\c</span>hrome-win32</code></pre><p>其中Name根据实际情况修改，替换为当前电脑用户名称。 解压后内容如下：</p><img src="/2020/08/25/2020-08-25-Douyin-Downloader/2020-08-25-chrome_to_pyppeteer.png" class title="chrome_to_pyppeteer"><ol start="6"><li><p>重新运行DYDownloader程序，并启动服务，服务正常启动后，显示如下信息（最后一行信息会持续输出） 2020-08-25-start_service_success.png</p></li><li><p>点击“URL”进行下载链接(用户分享链接)设置</p></li></ol><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>v.douyin.com<span class="hljs-regexp">/tSsdJ1/</span>https:<span class="hljs-regexp">//</span>v.douyin.com<span class="hljs-regexp">/wS4Sr9/</span>https:<span class="hljs-regexp">//</span>v.douyin.com<span class="hljs-regexp">/wSGSg9/</span>https:<span class="hljs-regexp">//</span>v.douyin.com<span class="hljs-regexp">/wSQudo/</span>https:<span class="hljs-regexp">//</span>v.douyin.com<span class="hljs-regexp">/wSw9qV/</span>https:<span class="hljs-regexp">//</span>v.douyin.com<span class="hljs-regexp">/wSQunG/</span>https:<span class="hljs-regexp">//</span>v.douyin.com<span class="hljs-regexp">/wSwxG1/</span>https:<span class="hljs-regexp">//</span>v.douyin.com<span class="hljs-regexp">/wStLr8/</span>https:<span class="hljs-regexp">//</span>v.douyin.com<span class="hljs-regexp">/wSKqMr/</span></code></pre><p>获取用户分享链接的方法: 直接在抖音分享，然后复制连接发送到qq或微信或者自己粘贴出来即可。</p><ol start="8"><li><p>点击“开始”进行下载</p></li><li><p>点击“下载结果”打开视频存储路径</p></li><li><p>程序需要license执行（免费申请），请发送您的机器物理地址到 <a href="http://mailto:zhen_zhang20@163.com/">zhen_zhang20@163.com</a> 或进行申请，邮件标题为“抖音下载许可申请，或者微信联系我进行申请。 </p><img src="/2020/08/25/2020-08-25-Douyin-Downloader/2020-08-25-mac_address_message.png" class title="mac_address_message"></li><li><p>一些说明：</p></li></ol><ul><li>程序没有暂停功能，如需中途停止，直接关闭</li><li>下载过程中，“开始”按钮会变为“下载中…”，下载完成后，自动恢复为“开始”</li><li>目前支持“下载路径”、‘下载失败重复次数’、“连接超时“、“定制报头信息”设置</li><li>不支持“线程数”设置（即不支持多线程下载）</li></ul><h3><span id="lian-xi-wo">联系我</span><a href="#lian-xi-wo" class="header-anchor"></a></h3><p>如果你对该程序感兴趣，可以扫码下面的二维码勾搭申请加入群聊。</p> <img src="/2020/08/25/2020-08-25-Douyin-Downloader/2020-08-25-share_wechart_qr.png" class title="share_wechart_qr"><h3><span id="zhi-xie">致谢</span><a href="#zhi-xie" class="header-anchor"></a></h3><ul><li><p>本文受到<a href="https://github.com/wangshub/Douyin-Bot/">wangshub/Douyin-Bot</a> 和 <a href="https://github.com/hokaso/douyin2bilibili">hokaso/douyin2bilibili</a> 启发而生</p></li><li><p>感谢 <a href="https://github.com/coder-fly/douyin-signature">coder-fly/douyin-signature</a> 及 很多微信上提供过信息的小伙伴。</p></li></ul><h3><span id="sheng-ming">声明</span><a href="#sheng-ming" class="header-anchor"></a></h3><ul><li>如有侵权，请联系进行删除，谢谢</li></ul><p><a href="https://github.com/zhenzhang20/DouyinVideoDownload_GUI_V2">Fork/Star on Github</a></p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Douyin</tag>
      
      <tag>抖音， 下载</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Python+Requests从alldatasheet下载指定文件</title>
    <link href="/2020/08/25/2020-08-25-Use-Python-Requests-Download-Alldatasheet/"/>
    <url>/2020/08/25/2020-08-25-Use-Python-Requests-Download-Alldatasheet/</url>
    
    <content type="html"><![CDATA[<p>最近需要从<a href="https://www.alldatasheet.com/">全球电子元器件数据手册库</a> 网上下载一些datasheet文件，手动下载比较耗时，写个下载脚本可以节省很多时间，且可以在需要下载内容更新后重复使用，提高效率。</p><h3><span id="she-ji-dao-de-zhi-shi-dian">涉及到的知识点</span><a href="#she-ji-dao-de-zhi-shi-dian" class="header-anchor"></a></h3><ol><li>Python读写Excel</li><li>Python requests 模块</li></ol><h3><span id="excel-guan-li-biao-ge">Excel管理表格</span><a href="#excel-guan-li-biao-ge" class="header-anchor"></a></h3><img src="/2020/08/25/2020-08-25-Use-Python-Requests-Download-Alldatasheet/2020-08-25-datasheet_excel.png" class title="datasheet_excel"><h3><span id="xu-qiu">需求</span><a href="#xu-qiu" class="header-anchor"></a></h3><ol><li>根据“分类”创建文件夹，即不同分类对应的下载后的pdf文件放在不同文件夹中。</li><li>根据“型号规格”命名文件，即下载后，把文件名命名为“型号规格.pdf”，如”ADG201AKR.pdf”。</li><li>根据“是否已经下载”来判断该行内容是否需要下载。如果为“Yes”，则表明已经下载过；如果为“No”则需要下载，同时下载后需要把标记改为“Yes”。</li><li>根据“链接”下载该行对应的pdf文件。即不需要搜索，直接用此链接下载。</li><li>“分类”“型号规格”“是否已经下载”“链接”在Excel中的列位置固定，下载程序中按位置查找（可以升级为按名称查找）</li></ol><h3><span id="guan-cha-xia-zai-guo-cheng-cha-zhao-zhen-shi-xia-zai-lian-jie">观察下载过程，查找真实下载链接</span><a href="#guan-cha-xia-zai-guo-cheng-cha-zhao-zhen-shi-xia-zai-lian-jie" class="header-anchor"></a></h3><ol><li>在网页中打开给定的下载链接，如：<a href="https://www.alldatasheet.com/datasheet-pdf/pdf/79516/INFINEON/BTS6163D.html">https://www.alldatasheet.com/datasheet-pdf/pdf/79516/INFINEON/BTS6163D.html</a></li><li>点击“Download”后，发现下载链接会变化为：<a href="https://pdf1.alldatasheet.com/datasheet-pdf/download/79516/INFINEON/BTS6163D.html%E3%80%82">https://pdf1.alldatasheet.com/datasheet-pdf/download/79516/INFINEON/BTS6163D.html。</a><br>该链接为真正的下载链接。</li></ol><h3><span id="huo-qu-xia-zai-fang-shi-ji-can-shu">获取下载方式及参数</span><a href="#huo-qu-xia-zai-fang-shi-ji-can-shu" class="header-anchor"></a></h3><ol><li>打开网址 <a href="https://www.alldatasheet.com/">https://www.alldatasheet.com/</a></li><li>搜索关键字，如 BTS6163D。也可以直接打开Excel中给定的下载链接</li><li>选择查看方式中的Download。结果如下图：<br><img src="alldatasheet_download_webpage.png" alt="alldatasheet_download_webpage"></li><li>在下面的”Download”按钮上右键，并选择弹出菜单中的”查看元素”（如果是Chrome浏览器，则对应选项”检查”），可以查看到该按钮的响应为一个==Post==请求。注意，该post请求有一个参数：</li></ol><pre><code class="hljs pgsql">&lt;<span class="hljs-keyword">input</span> <span class="hljs-type">name</span>=&quot;tmpinfo1aa&quot; <span class="hljs-keyword">type</span>=&quot;hidden&quot; <span class="hljs-keyword">value</span>=&quot;abc&quot;&gt;</code></pre><p><img src="alldatasheet_download_webpage_find_submit.png" alt="alldatasheet_download_webpage_find_submit"></p><h3><span id="dai-ma">代码</span><a href="#dai-ma" class="header-anchor"></a></h3><p>代码如下：</p><pre><code class="hljs ruby">import openpyxlimport requestsimport timeimport os<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ExcelOp</span>(<span class="hljs-title">object</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, file)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-keyword">self</span>.file = file        <span class="hljs-keyword">self</span>.wb = openpyxl.load_workbook(<span class="hljs-keyword">self</span>.file)        sheets = <span class="hljs-keyword">self</span>.wb.sheetnames        <span class="hljs-keyword">self</span>.sheet = sheets[<span class="hljs-number">0</span>]        <span class="hljs-keyword">self</span>.ws = <span class="hljs-keyword">self</span>.wb[<span class="hljs-keyword">self</span>.sheet]    <span class="hljs-comment"># 获取表格的总行数和总列数</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_row_clo_num</span><span class="hljs-params">(<span class="hljs-keyword">self</span>)</span></span><span class="hljs-symbol">:</span>        rows = <span class="hljs-keyword">self</span>.ws.max_row        columns = <span class="hljs-keyword">self</span>.ws.max_column        <span class="hljs-keyword">return</span> rows, columns    <span class="hljs-comment"># 获取某个单元格的值</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_cell_value</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, row, column)</span></span><span class="hljs-symbol">:</span>        cell_value = <span class="hljs-keyword">self</span>.ws.cell(row=row, column=column).value        <span class="hljs-keyword">return</span> cell_value    <span class="hljs-comment"># 获取某列的所有值</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_col_value</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, column)</span></span><span class="hljs-symbol">:</span>        rows = <span class="hljs-keyword">self</span>.ws.max_row        column_data = []        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, rows + <span class="hljs-number">1</span>)<span class="hljs-symbol">:</span>            cell_value = <span class="hljs-keyword">self</span>.ws.cell(row=i, column=column).value            column_data.append(cell_value)        <span class="hljs-keyword">return</span> column_data    <span class="hljs-comment"># 获取某行所有值</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_row_value</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, row)</span></span><span class="hljs-symbol">:</span>        columns = <span class="hljs-keyword">self</span>.ws.max_column        row_data = []        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, columns + <span class="hljs-number">1</span>)<span class="hljs-symbol">:</span>            cell_value = <span class="hljs-keyword">self</span>.ws.cell(row=row, column=i).value            row_data.append(cell_value)        <span class="hljs-keyword">return</span> row_data    <span class="hljs-comment"># 设置某个单元格的值</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">set_cell_value</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, row, colunm, cellvalue)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-symbol">try:</span>            <span class="hljs-keyword">self</span>.ws.cell(row=row, column=colunm).value = cellvalue            <span class="hljs-keyword">self</span>.wb.save(<span class="hljs-keyword">self</span>.file)        <span class="hljs-symbol">except:</span>            <span class="hljs-keyword">self</span>.ws.cell(row=row, column=colunm).value = <span class="hljs-string">&quot;writefail&quot;</span>            <span class="hljs-keyword">self</span>.wb.save(<span class="hljs-keyword">self</span>.file)<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Downloader</span>(<span class="hljs-title">object</span>):</span>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">download_from_alldatasheet</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, filename, url, savefolder=<span class="hljs-string">&quot;&quot;</span>)</span></span><span class="hljs-symbol">:</span>        SUCCESS = False        filename = filename + <span class="hljs-string">&quot;.pdf&quot;</span>        params = &#123;            <span class="hljs-string">&quot;tmpinfo1aa&quot;</span>: <span class="hljs-string">&quot;abc&quot;</span>,        &#125;        <span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> <span class="hljs-symbol">SUCCESS:</span>            print(<span class="hljs-string">&quot;尝试URL连接中...&quot;</span>)            req = requests.request(method=<span class="hljs-string">&#x27;POST&#x27;</span>, url=url, params=params)            print(<span class="hljs-string">&quot;获取返回内容信息文本，如果是pdf，比较耗时，请等待...&quot;</span>)            text = req.text            print(<span class="hljs-string">&quot;获取返回内容信息文本完成。&quot;</span>)            <span class="hljs-keyword">if</span> text.find(<span class="hljs-string">&quot;Download is temporarily unavailable&quot;</span>) != -<span class="hljs-number">1</span><span class="hljs-symbol">:</span>                print(<span class="hljs-string">&quot;下载太频繁，等待五分钟......，等待中&quot;</span>)                time.sleep(<span class="hljs-number">300</span>)                continue            <span class="hljs-symbol">else:</span>                SUCCESS = True            <span class="hljs-comment"># print(filename + &quot; : \n&quot;)</span>            <span class="hljs-comment"># print(text)</span>            data = req.content            full_savefolder = os.path.join(os.path.abspath(os.curdir), savefolder)            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> os.path.exists(full_savefolder)<span class="hljs-symbol">:</span>                os.mkdir(full_savefolder)            full_filepath = os.path.join(full_savefolder, filename)            print(<span class="hljs-string">&quot;尝试存储文件：&quot;</span> + filename)            with open(full_filepath, <span class="hljs-string">&quot;wb&quot;</span>) as <span class="hljs-symbol">code:</span>                code.write(data)                print(<span class="hljs-string">&quot;存储文件：&quot;</span> + filename + <span class="hljs-string">&quot;完成&quot;</span>)                <span class="hljs-keyword">return</span> True        <span class="hljs-keyword">return</span> False    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">valid_url</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, url)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-comment"># https://www.alldatasheet.com/datasheet-pdf/pdf/436213/HITTITE/HMC704LP4E.html</span>        <span class="hljs-keyword">if</span> str(url).startswith(<span class="hljs-string">&quot;https://www.alldatasheet.com/datasheet-pdf/pdf/&quot;</span>)<span class="hljs-symbol">:</span>            <span class="hljs-keyword">return</span> True        <span class="hljs-keyword">return</span> False    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_tbd</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, checkstr)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-keyword">if</span> str(checkstr).strip().lower() == <span class="hljs-string">&#x27;no&#x27;</span><span class="hljs-symbol">:</span>            <span class="hljs-keyword">return</span> True        <span class="hljs-keyword">return</span> False    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">transfer_url</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, url)</span></span><span class="hljs-symbol">:</span>        <span class="hljs-comment"># https://www.alldatasheet.com/datasheet-pdf/pdf/436213/HITTITE/HMC704LP4E.html</span>        before = <span class="hljs-string">&quot;https://www.alldatasheet.com/datasheet-pdf/pdf/&quot;</span>        after = <span class="hljs-string">&quot;https://pdf1.alldatasheet.com/datasheet-pdf/download/&quot;</span>        <span class="hljs-keyword">return</span> str(url).replace(before, after)<span class="hljs-keyword">if</span> __name_<span class="hljs-number">_</span> == <span class="hljs-string">&quot;__main__&quot;</span><span class="hljs-symbol">:</span>    excel_op = ExcelOp(file=<span class="hljs-string">&quot;LIST.xlsx&quot;</span>)    downloader = Downloader()    <span class="hljs-comment"># 1-&#x27;&#x27;， 4-型号规格, 6-下载, 7-链接</span>    need_cols = [<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>]    rows, columns = excel_op.get_row_clo_num()    <span class="hljs-comment"># 从第二行开始解析下载</span>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>,rows+<span class="hljs-number">1</span>)<span class="hljs-symbol">:</span>        need_col_values = []        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> <span class="hljs-symbol">need_cols:</span>            cell_val = excel_op.get_cell_value(i,j)            need_col_values.append(cell_val)        print(need_col_values)        savefolder = need_col_values[<span class="hljs-number">0</span>]        filename = need_col_values[<span class="hljs-number">1</span>]        str_TBD = need_col_values[<span class="hljs-number">2</span>]        url = need_col_values[<span class="hljs-number">3</span>]        <span class="hljs-keyword">if</span> downloader.is_tbd(str_TBD) <span class="hljs-keyword">and</span> downloader.valid_url(url)<span class="hljs-symbol">:</span>            url = downloader.transfer_url(url)            res = downloader.download_from_alldatasheet(filename, url, savefolder)            <span class="hljs-keyword">if</span> <span class="hljs-symbol">res:</span>                excel_op.set_cell_value(i, <span class="hljs-number">6</span>, <span class="hljs-string">&#x27;Yes&#x27;</span>)</code></pre><h3><span id="yun-xing-guo-cheng">运行过程</span><a href="#yun-xing-guo-cheng" class="header-anchor"></a></h3><p>在命令行运行结果示例：</p><pre><code class="hljs routeros">C:\Users\Administrator\Download&gt;python download.py[<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;ADG201AKR&#x27;</span>, <span class="hljs-string">&#x27;No&#x27;</span>, <span class="hljs-string">&#x27;https://www.alldatasheet.com/datasheet-pdf/pdf/48648/AD/ADG201AKR.html&#x27;</span>]尝试URL连接中<span class="hljs-built_in">..</span>.获取返回内容信息文本，如果是pdf，比较耗时，请等待<span class="hljs-built_in">..</span>.获取返回内容信息文本完成。尝试存储文件：ADG201AKR.pdf存储文件：ADG201AKR.pdf完成<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>[<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;TPS5450DDA&#x27;</span>, <span class="hljs-string">&#x27;No&#x27;</span>, <span class="hljs-string">&#x27;https://www.alldatasheet.com/datasheet-pdf/pdf/180875/TI/TPS5450DDA.html&#x27;</span>]尝试URL连接中<span class="hljs-built_in">..</span>.获取返回内容信息文本，如果是pdf，比较耗时，请等待<span class="hljs-built_in">..</span>.获取返回内容信息文本完成。下载太频繁，等待五分钟<span class="hljs-built_in">..</span><span class="hljs-built_in">..</span><span class="hljs-built_in">..</span>，等待中尝试URL连接中<span class="hljs-built_in">..</span>.获取返回内容信息文本，如果是pdf，比较耗时，请等待<span class="hljs-built_in">..</span>.获取返回内容信息文本完成。尝试存储文件：TPS5450DDA.pdf存储文件：TPS5450DDA.pdf完成[<span class="hljs-string">&#x27;C&#x27;</span>, <span class="hljs-string">&#x27;DCP010512BP&#x27;</span>, <span class="hljs-string">&#x27;No&#x27;</span>, <span class="hljs-string">&#x27;https://www.alldatasheet.com/datasheet-pdf/pdf/527520/TI1/DCP010512BP-U.html&#x27;</span>]尝试URL连接中<span class="hljs-built_in">..</span>.获取返回内容信息文本，如果是pdf，比较耗时，请等待<span class="hljs-built_in">..</span>.获取返回内容信息文本完成。尝试存储文件：DCP010512BP.pdf存储文件：DCP010512BP.pdf完成</code></pre><h3><span id="shuo-ming">说明</span><a href="#shuo-ming" class="header-anchor"></a></h3><p>连续下载10个pdf后，网站会提示输入验证码，网页中含有信息“Download is temporarily unavailable”。观察发现，在遇到提示后，等待几分钟，便可以继续下载。程序中：在遇到下载失败后，会等待了5分钟，然后继续下载。</p><p><a href="https://github.com/zhenzhang20/Alldatasheet">Fork/Star on Github</a></p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Requests</tag>
      
      <tag>alldatasheet</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>通过SSH访问Github设置</title>
    <link href="/2020/08/24/2020-08-24-SSH-Github-Setting/"/>
    <url>/2020/08/24/2020-08-24-SSH-Github-Setting/</url>
    
    <content type="html"><![CDATA[<p>使用SSH密钥，您可以在每次访问时无需提供用户名或密码即可连接到GitHub。</p><h3><span id="chang-shi-shi-yong-ssh-fang-wen-github">尝试使用ssh访问Github</span><a href="#chang-shi-shi-yong-ssh-fang-wen-github" class="header-anchor"></a></h3><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -T git<span class="hljs-variable">@github</span>.com</code></pre><p>在设置ssh授权之前，会提示：can’t be established.</p><pre><code class="hljs scala"><span class="hljs-type">Administrator</span><span class="hljs-meta">@GOS</span><span class="hljs-number">-01709151419</span> <span class="hljs-type">MINGW64</span> ~/.ssh$ ssh -<span class="hljs-type">T</span> git<span class="hljs-meta">@github</span>.com<span class="hljs-type">The</span> authenticity of host <span class="hljs-symbol">&#x27;github</span>.com (<span class="hljs-number">13.229</span><span class="hljs-number">.188</span><span class="hljs-number">.59</span>)&#x27; can<span class="hljs-symbol">&#x27;t</span> be established.<span class="hljs-type">RSA</span> key fingerprint is <span class="hljs-type">SHA256</span>:nThbg6kXUpJWGl7E1IGOCsiRomTxdCARLviKw6E5SY8.<span class="hljs-type">Are</span> you sure you want to <span class="hljs-keyword">continue</span> connecting (yes/no/[fingerprint])? yes<span class="hljs-type">Warning</span>: <span class="hljs-type">Permanently</span> added <span class="hljs-symbol">&#x27;github</span>.com,<span class="hljs-number">13.229</span><span class="hljs-number">.188</span><span class="hljs-number">.59</span>&#x27; (<span class="hljs-type">RSA</span>) to the list of known hosts.git<span class="hljs-meta">@github</span>.com: <span class="hljs-type">Permission</span> denied (publickey).</code></pre><h3><span id="jian-cha-ben-di-shi-fou-cun-zai-ssh-keys">检查本地是否存在ssh keys</span><a href="#jian-cha-ben-di-shi-fou-cun-zai-ssh-keys" class="header-anchor"></a></h3><ol><li><p>打开Git Bash，输入以下命令：</p><pre><code class="hljs bash">ls -al ~/.ssh</code></pre></li></ol><p>如果ssh文件夹内有类似id_rsa.pub的文件，代表你的本地已经拥有了ssh keys，那么你可以直接跳过生成ssh keys的步骤。</p><h3><span id="sheng-cheng-yi-ge-xin-de-ssh-key">生成一个新的ssh key</span><a href="#sheng-cheng-yi-ge-xin-de-ssh-key" class="header-anchor"></a></h3><ol start="2"><li>打开Git Bash，输入以下命令：</li></ol><pre><code class="hljs bash">ssh-keygen -t rsa -b 4096 -C <span class="hljs-string">&quot;your_email@example.com&quot;</span></code></pre><p>此处需要你填写的邮箱，这个邮箱地址是个注释（标识），没有任何实质作用。建议填写个人邮箱作为注释。</p><p>​    会有三个提示，直接按回车即可。最终信息类似如下：</p><pre><code class="hljs properties"><span class="hljs-meta">Administrator@GOS-11709151419</span> <span class="hljs-string">MINGW64 ~</span><span class="hljs-meta">$</span> <span class="hljs-string">ssh-keygen -t rsa -b 4096 -C &quot;your_email@example.com&quot;</span><span class="hljs-attr">Generating</span> <span class="hljs-string">public/private rsa key pair.</span><span class="hljs-attr">Enter</span> <span class="hljs-string">file in which to save the key (/c/Users/Administrator/.ssh/id_rsa):</span><span class="hljs-attr">Enter</span> <span class="hljs-string">passphrase (empty for no passphrase):</span><span class="hljs-attr">Enter</span> <span class="hljs-string">same passphrase again:</span><span class="hljs-attr">Your</span> <span class="hljs-string">identification has been saved in /c/Users/Administrator/.ssh/id_rsa</span><span class="hljs-attr">Your</span> <span class="hljs-string">public key has been saved in /c/Users/Administrator/.ssh/id_rsa.pub</span><span class="hljs-attr">The</span> <span class="hljs-string">key fingerprint is:</span><span class="hljs-attr">SHA256</span>:<span class="hljs-string">UDZ6Tpa1DZgBgCM+rT94d41+tfgFWdAdJcRqcrhAuNU your_email@example.com</span><span class="hljs-attr">The</span> <span class="hljs-string">key&#x27;s randomart image is:</span><span class="hljs-meta">+---[RSA</span> <span class="hljs-string">4096]----+</span><span class="hljs-meta">|</span>   <span class="hljs-string">....o==o..o+.+|</span><span class="hljs-attr">+----[SHA256]-----+</span></code></pre><ol start="3"><li>复制id_rsa.pub中内容，将作为ssh key粘贴到GitHub上。</li></ol><h3><span id="jiang-ssh-mi-yao-jia-ru-ni-de-github-zhang-hu-zhong">将SSH密钥加入你的GitHub账户中</span><a href="#jiang-ssh-mi-yao-jia-ru-ni-de-github-zhang-hu-zhong" class="header-anchor"></a></h3><ol start="4"><li>登录GitHub，点击右上角的头像图标，点击settings，再点击左侧栏里面的<strong>SSH and GPG keys</strong>，然后点击右侧“New SSH key”</li></ol><ol start="5"><li>把复制的id_rsa.pub中内容粘贴到Key中。Title为标识，可以任意填写。如：</li></ol><ol start="6"><li>添加后，再次尝试使用ssh访问GitHub则显示为：</li></ol><pre><code class="hljs vhdl">Administrator@GOS-<span class="hljs-number">01709151419</span> MINGW64 ~/.ssh$ ssh -T git@github.comThe authenticity <span class="hljs-keyword">of</span> host <span class="hljs-symbol">&#x27;github</span>.com (<span class="hljs-number">13.250</span>.<span class="hljs-number">177.223</span>)&#x27; can<span class="hljs-symbol">&#x27;t</span> be established.RSA key fingerprint <span class="hljs-keyword">is</span> SHA256:nThbg6kXUpJWGl7E1IGOCsiRomTxdCARLviKw6E5SY8.Are you sure you want <span class="hljs-keyword">to</span> continue connecting (yes/no/[fingerprint])? yes<span class="hljs-literal">Warning</span>: Permanently added <span class="hljs-symbol">&#x27;github</span>.com,<span class="hljs-number">13.250</span>.<span class="hljs-number">177.223</span>&#x27; (RSA) <span class="hljs-keyword">to</span> the list <span class="hljs-keyword">of</span> known hosts.Hi YourGitHubName! You<span class="hljs-symbol">&#x27;ve</span> successfully authenticated, but GitHub does <span class="hljs-keyword">not</span> provide shell <span class="hljs-keyword">access</span>.</code></pre><p>此时，完成SSH访问GitHub设置</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Hexo</tag>
      
      <tag>SSH</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用攻略-更换域名</title>
    <link href="/2020/08/23/2020-08-23-Hexo-Change-Domain/"/>
    <url>/2020/08/23/2020-08-23-Hexo-Change-Domain/</url>
    
    <content type="html"><![CDATA[<p>博客搭建好后，我们可以通过之前设置好的GitHub仓库地址来访问，比如我的：<a href="http://zhenzhang20.github.io/">http://zhenzhang20.github.io</a>，而且GitHub是免费替我们托管的的。如果我们想要设置自己的域名，我们可以购买域名并进行解析绑定。</p><h3><span id="huo-qu-github-io-ip-di-zhi">获取github.io IP地址</span><a href="#huo-qu-github-io-ip-di-zhi" class="header-anchor"></a></h3><p>获取个人在github.io站点的二级域名IP地址，我获取到的地址是 185.199.108.153 </p><pre><code class="hljs angelscript">C:\Users\Administrator&gt;ping zhenzhang20.github.io <span class="hljs-number">-4</span>正在 Ping zhenzhang20.github.io [<span class="hljs-number">185.199</span><span class="hljs-number">.108</span><span class="hljs-number">.153</span>] 具有 <span class="hljs-number">32</span> 字节的数据:来自 <span class="hljs-number">185.199</span><span class="hljs-number">.108</span><span class="hljs-number">.153</span> 的回复: 字节=<span class="hljs-number">32</span> 时间=<span class="hljs-number">88</span>ms TTL=<span class="hljs-number">45</span>来自 <span class="hljs-number">185.199</span><span class="hljs-number">.108</span><span class="hljs-number">.153</span> 的回复: 字节=<span class="hljs-number">32</span> 时间=<span class="hljs-number">89</span>ms TTL=<span class="hljs-number">45</span>来自 <span class="hljs-number">185.199</span><span class="hljs-number">.108</span><span class="hljs-number">.153</span> 的回复: 字节=<span class="hljs-number">32</span> 时间=<span class="hljs-number">83</span>ms TTL=<span class="hljs-number">45</span>来自 <span class="hljs-number">185.199</span><span class="hljs-number">.108</span><span class="hljs-number">.153</span> 的回复: 字节=<span class="hljs-number">32</span> 时间=<span class="hljs-number">74</span>ms TTL=<span class="hljs-number">45</span><span class="hljs-number">185.199</span><span class="hljs-number">.108</span><span class="hljs-number">.153</span> 的 Ping 统计信息:    数据包: 已发送 = <span class="hljs-number">4</span>，已接收 = <span class="hljs-number">4</span>，丢失 = <span class="hljs-number">0</span> (<span class="hljs-number">0</span>% 丢失)，往返行程的估计时间(以毫秒为单位):    最短 = <span class="hljs-number">74</span>ms，最长 = <span class="hljs-number">89</span>ms，平均 = <span class="hljs-number">83</span>ms</code></pre><h3><span id="yu-ming-she-zhi">域名设置</span><a href="#yu-ming-she-zhi" class="header-anchor"></a></h3><p>在域名供应商处购买域名，域名购买成功之后进行实名认证。我是在<a href="https://www.aliyun.com/">阿里云</a>购买，以下步骤基于阿里云设置。</p><ol><li><p>进入域名控制台，选择一个域名并点击相应的“解析”选项</p><img src="/2020/08/23/2020-08-23-Hexo-Change-Domain/2020-08-23-aliyun_domain.png" class></li></ol><ol start="2"><li>进入域名解析界面，如下：</li></ol><img src="/2020/08/23/2020-08-23-Hexo-Change-Domain/2020-08-23-aliyun_domain_setting.png" class><ol start="3"><li>选择“添加记录”。</li></ol><p>   第一条：记录A型，主机记录为“@”，记录值为上面获取到的IP地址”185.199.108.153”</p><p>   第二条：记录CNAME型，主机记录为“www”，记录值为个人在github.io站点的二级域名”zhenzhang20.github.io”</p><p>   同时添加两条记录可保证无论是否添加www都可以访问到目标地址。</p>   <img src="/2020/08/23/2020-08-23-Hexo-Change-Domain/2020-08-23-aliyun_domain_add_record.png" class><ol start="4"><li>添加完后后内容如下：</li></ol><img src="/2020/08/23/2020-08-23-Hexo-Change-Domain/2020-08-23-aliyun_domain_add_record_finish.png" class><ol start="5"><li><p>在博客的source 目录下，创建CNAME文件，文件内容为选定的域名地址</p><pre><code class="hljs css"><span class="hljs-selector-tag">www</span><span class="hljs-selector-class">.xiejiashan8</span><span class="hljs-selector-class">.com</span></code></pre></li></ol><p>   这一步的目的是：GitHub 会读取你的CNAME 内容，GitHub 服务器会设置xiejiashan8.com 为你的主域名，然后将zhenzhang20.github.io 重定向到xiejiashan8.com。</p><h3><span id="github-pages-she-zhi">Github Pages 设置</span><a href="#github-pages-she-zhi" class="header-anchor"></a></h3><ol start="6"><li><p>在项目的Settings中，添加Custom domain到自己的域名</p><img src="/2020/08/23/2020-08-23-Hexo-Change-Domain/2020-08-23-github_pages_custom_domain.png" class></li></ol><h3><span id="da-kai-bo-ke">打开博客</span><a href="#da-kai-bo-ke" class="header-anchor"></a></h3><ol start="7"><li><p>设置完成后，重新发布自己的博客内容。</p></li><li><p>此时在浏览器打开 zhenzhang20.github.io 会被重定向到 xiejiashan8.com</p></li></ol><h4><span id="yu-ming-jie-xi-shuo-ming">域名解析说明</span><a href="#yu-ming-jie-xi-shuo-ming" class="header-anchor"></a></h4><ul><li>A记录：地址记录，用来指定域名的IPv4地址（如：8.8.8.8），如果需要将域名指向一个IP地址，就需要添加A记录。</li><li>CNAME： 如果需要将域名指向另一个域名，再由另一个域名提供ip地址，就需要添加CNAME记录。</li></ul><ul><li><p>www：解析后的域名为<a href="www.zhenzhang20.github.io">www.zhenzhang20.github.io</a></p></li><li><p>@：直接解析主域名 <a href="https://zhenzhang20.github.io/">zhenzhang20.github.io</a></p></li></ul>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用攻略-常用设置</title>
    <link href="/2020/08/22/2020-08-22-Hexo_General_Setting/"/>
    <url>/2020/08/22/2020-08-22-Hexo_General_Setting/</url>
    
    <content type="html"><![CDATA[<h3><span id="chang-yong-she-zhi">常用设置</span><a href="#chang-yong-she-zhi" class="header-anchor"></a></h3><ol><li><p>设置使用 “hexo new post 文章名称” 创建的文章的默认标题部分属性。修改“scaffolds/post.md”内容为：</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> &#123;&#123; <span class="hljs-string">title</span> &#125;&#125;<span class="hljs-attr">date:</span> &#123;&#123; <span class="hljs-string">date</span> &#125;&#125;<span class="hljs-attr">categories:</span><span class="hljs-attr">tags:</span><span class="hljs-attr">toc:</span> <span class="hljs-literal">true</span><span class="hljs-attr">index_img:</span> <span class="hljs-string">/thumbnail/thumbnail_default.png</span><span class="hljs-meta">---</span></code></pre></li></ol><ol start="2"><li><p>修改博客目录中_config.yml 中的title、author、language属性：</p><pre><code class="hljs less"><span class="hljs-attribute">title</span>: <span class="hljs-string">&#x27;&#x27;</span> # <span class="hljs-attribute">author</span>: John Doe<span class="hljs-attribute">author</span>: 卸甲山# <span class="hljs-attribute">language</span>: en<span class="hljs-attribute">language</span>: zh-CN</code></pre></li></ol>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用攻略-更换主题</title>
    <link href="/2020/08/22/2020-08-22-Hexo_Change_Themes/"/>
    <url>/2020/08/22/2020-08-22-Hexo_Change_Themes/</url>
    
    <content type="html"><![CDATA[<h2><span id="huo-qu-kai-yuan-de-hexo-zhu-ti">获取开源的 Hexo 主题</span><a href="#huo-qu-kai-yuan-de-hexo-zhu-ti" class="header-anchor"></a></h2><p>我们可以根据不同风格的网站设置不同的主题。<a href="https://hexo.io/themes/">Hexo的主题官网</a>提供丰富的主题，比较流行的有：Next、Yilia等。 我选用的是<a href="https://github.com/fluid-dev/hexo-theme-fluid">Fluid</a>。原因： </p><ol><li>持续更新中</li><li>非常详细的说明文档</li><li>有微信群随时讨论</li></ol><h3><span id="an-zhuang-zhu-ti">安装主题</span><a href="#an-zhuang-zhu-ti" class="header-anchor"></a></h3><p>首先进入到你的本地博客目录下，克隆你选择的主题的GitHub仓库到本地。</p><pre><code class="hljs awk">$ cd &lt;博客目录&gt;$ git clone https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/fluid-dev/</span>hexo-theme-fluid themes/fluid</code></pre><h3><span id="shi-yong-zhu-ti">使用主题</span><a href="#shi-yong-zhu-ti" class="header-anchor"></a></h3><p>打开博客目录下的 _config.yml，将主题修改为 fluid</p><pre><code class="hljs avrasm"><span class="hljs-symbol">theme:</span> fluid</code></pre><h3><span id="bu-shu-dao-fu-wu-qi">部署到服务器</span><a href="#bu-shu-dao-fu-wu-qi" class="header-anchor"></a></h3><p>使用hexo命令重新更新使主题生效。</p><h3><span id="wo-de-she-zhi">我的设置</span><a href="#wo-de-she-zhi" class="header-anchor"></a></h3><ol><li>为避免更新主题使个人设置被覆盖，在 _data 目录下创建 fluid_config.yml 文件，将 /theme/fluid/_config.yml 中全部配置复制到 fluid_config.yml。后续修改全部基于_data/fluid_config.yml 。</li><li>我的网站修改的设置清单：</li></ol><ul><li>启用leancloud 做阅读量统计</li><li>更改字体大小、博客标题、博客标语</li><li>添加评论功能</li><li>更改”about”中个人设置</li></ul><table><thead><tr><th align="left">默认设置</th><th align="left">修改后设置</th></tr></thead><tbody><tr><td align="left">font_size: 16px</td><td align="left">font_size: 18px</td></tr><tr><td align="left">web_analytics:<br>enable: false</td><td align="left">web_analytics:<br>enable: true</td></tr><tr><td align="left">blog_title: Fluid</td><td align="left">blog_title: ‘’</td></tr><tr><td align="left">footer: <br>statistics: <br>enable: false <br>source: “busuanzi”</td><td align="left">footer: <br>statistics: <br>enable: true <br>source: “leancloud”</td></tr><tr><td align="left">banner_img_height: 100</td><td align="left">banner_img_height: 70</td></tr><tr><td align="left">slogan: <br>enable: true</td><td align="left">slogan: <br>enable: false</td></tr><tr><td align="left">views: <br>enable: false <br>source: “busuanzi”</td><td align="left">views: <br>enable: true <br>source: “leancloud”</td></tr><tr><td align="left">comments: <br>enable: false <br>type: disqus</td><td align="left">comments: <br>enable: true <br>type: valine</td></tr><tr><td align="left">about: <br>name: myname <br>introduce: ‘一句简短的介绍’</td><td align="left">about: <br>name: 卸甲山 <br>introduce: ‘半导体从业者/程序员’</td></tr></tbody></table><ol start="3"><li>其他修改</li></ol><ul><li>修改主题目录~fluid\source\img中的默认图片为合适的图片内容</li><li>创建about页面并增加相应的内容</li></ul><h3><span id="can-kao">参考</span><a href="#can-kao" class="header-anchor"></a></h3><blockquote><p><a href="https://hexo.fluid-dev.com/">fluid配置指南</a></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用攻略-添加目录</title>
    <link href="/2020/08/22/2020-08-22-Hexo_Method_AddContent/"/>
    <url>/2020/08/22/2020-08-22-Hexo_Method_AddContent/</url>
    
    <content type="html"><![CDATA[<h3><span id="1-an-zhuang">1. 安装</span><a href="#1-an-zhuang" class="header-anchor"></a></h3><p>首先，安装一个<a href="https://github.com/bubkoo/hexo-toc/">hexo-toc</a>的插件，代码如下：</p><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-toc <span class="hljs-comment">--save</span></code></pre><h3><span id="2-pei-zhi">2. 配置</span><a href="#2-pei-zhi" class="header-anchor"></a></h3><p>配置一下站点配置文件_config.yml:</p><pre><code class="hljs yaml"><span class="hljs-attr">toc:</span>  <span class="hljs-attr">maxdepth:</span> <span class="hljs-number">3</span>  <span class="hljs-attr">class:</span> <span class="hljs-string">toc</span>  <span class="hljs-attr">slugify:</span> <span class="hljs-string">transliteration</span>  <span class="hljs-attr">decodeEntities:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">anchor:</span>    <span class="hljs-attr">position:</span> <span class="hljs-string">after</span>    <span class="hljs-attr">symbol:</span> <span class="hljs-string">&#x27;#&#x27;</span>    <span class="hljs-attr">style:</span> <span class="hljs-string">header-anchor</span></code></pre><h3><span id="3-shi-yong">3. 使用</span><a href="#3-shi-yong" class="header-anchor"></a></h3><p>在Markdown文章中加入TOC的占位符：</p><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- toc --&gt;</span></code></pre><h3><span id="4-xiao-guo">4. 效果</span><a href="#4-xiao-guo" class="header-anchor"></a></h3><img src="/2020/08/22/2020-08-22-Hexo_Method_AddContent/2020_08_22_hexo_content_demo.png" class title="hexo_content_demo"><h3><span id="5-yi-ban-shi-yong">5. 一般使用</span><a href="#5-yi-ban-shi-yong" class="header-anchor"></a></h3><pre><code class="hljs yaml"><span class="hljs-attr">toc:</span>  <span class="hljs-attr">maxdepth:</span> <span class="hljs-number">3</span>  <span class="hljs-attr">class:</span> <span class="hljs-literal">false</span>  <span class="hljs-attr">slugify:</span> <span class="hljs-string">transliteration</span>  <span class="hljs-attr">decodeEntities:</span> <span class="hljs-literal">false</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何在windows下创建Python虚拟环境?</title>
    <link href="/2020/08/21/2020-08-21-Python37_Create_Venv/"/>
    <url>/2020/08/21/2020-08-21-Python37_Create_Venv/</url>
    
    <content type="html"><![CDATA[<h3><span id="jian-jie">简介</span><a href="#jian-jie" class="header-anchor"></a></h3><p>Python3.7的版本可以通过venv模块创建虚拟环境。 venv模块提供了创建轻量级“虚拟环境”，提供与系统Python的隔离支持。每一个虚拟环境都有其自己的Python二进制（允许有不同的Python版本创作环境），并且可以拥有自己独立的一套Python包。</p><h3><span id="chuang-jian-xu-ni-huan-jing">创建虚拟环境</span><a href="#chuang-jian-xu-ni-huan-jing" class="header-anchor"></a></h3><ul><li>在当前目录创建虚拟环境：</li></ul><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>python -m venv .</code></pre><ul><li>激活虚拟环境</li></ul><pre><code class="hljs arcade">C:\&lt;venvpath&gt;<span class="hljs-regexp">/Scripts/</span>activate.bat</code></pre><ul><li>退出虚拟环境</li></ul><pre><code class="hljs arcade">C:\&lt;venvpath&gt;<span class="hljs-regexp">/Scripts/</span>deactivate.bat</code></pre><h3><span id="ru-he-zai-pycharm-zhong-shi-yong-pei-zhi-hao-de-virtualenv-huan-jing">如何在pycharm中使用配置好的virtualenv环境</span><a href="#ru-he-zai-pycharm-zhong-shi-yong-pei-zhi-hao-de-virtualenv-huan-jing" class="header-anchor"></a></h3><ul><li>打开setting添加本地python环境</li></ul><img src="/2020/08/21/2020-08-21-Python37_Create_Venv/2020_08_21_pycharm_venv_setting.png" class title="pycharm_venv_setting"><ul><li>选择刚刚创建的虚拟环境</li></ul><img src="/2020/08/21/2020-08-21-Python37_Create_Venv/2020_08_21_pycharm_venv_setting_select.png" class title="pycharm_venv_setting_select"><ul><li>设置完成后</li></ul><img src="/2020/08/21/2020-08-21-Python37_Create_Venv/2020_08_21_pycharm_venv_setting_use.png" class title="pycharm_venv_setting_use">]]></content>
    
    
    <categories>
      
      <category>Python</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Python</tag>
      
      <tag>Python venv</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用攻略-添加分类及标签</title>
    <link href="/2020/08/20/2020-08-20-Hexo_Method_AddCategory_AddTag/"/>
    <url>/2020/08/20/2020-08-20-Hexo_Method_AddCategory_AddTag/</url>
    
    <content type="html"><![CDATA[<h3><span id="1-chuang-jian-ye-mian">1. 创建页面</span><a href="#1-chuang-jian-ye-mian" class="header-anchor"></a></h3><p>进入博客目录，执行命令下方命令，生成“分类”页</p><pre><code class="hljs routeros">hexo new<span class="hljs-built_in"> page </span>categories</code></pre><h3><span id="2-bian-ji-ye-mian">2. 编辑页面</span><a href="#2-bian-ji-ye-mian" class="header-anchor"></a></h3><p>编辑新生成的页面文件：source/categories/index.md，打开后默认内容是这样的：</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span> <span class="hljs-attr">title:</span> <span class="hljs-string">categories</span> <span class="hljs-attr">date:</span> <span class="hljs-number">2020-08-20 18:47:40</span><span class="hljs-meta">---</span></code></pre><p>添加 type: “categories” 到内容中，添加后是这样的：</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">文章分类</span><span class="hljs-attr">date:</span> <span class="hljs-number">2020-08-20 18:47:40</span><span class="hljs-attr">type:</span> <span class="hljs-string">&quot;categories&quot;</span><span class="hljs-meta">---</span></code></pre><h3><span id="3-wen-zhang-fen-lei">3. 文章分类</span><a href="#3-wen-zhang-fen-lei" class="header-anchor"></a></h3><p>打开需要添加分类的文章，为其添加categories属性。下方的categories: WEB。表示这篇文章添加到到“WEB”这个分类。</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">题目</span><span class="hljs-attr">date:</span> <span class="hljs-number">2020-08-20 18:47:40</span><span class="hljs-attr">categories:</span> <span class="hljs-string">WEB</span><span class="hljs-meta">---</span></code></pre><p>注意：一篇文章只会添加到一个分类中，如果是多个，会放到第一个分类中。</p><h3><span id="4-xian-shi-fen-lei-zai-cai-dan-zhong-tian-jia-lian-jie">4. 显示分类（在菜单中添加链接）</span><a href="#4-xian-shi-fen-lei-zai-cai-dan-zhong-tian-jia-lian-jie" class="header-anchor"></a></h3><p>编辑主题目录（不是根目录）下的 _config.yml ，将 menu 中的 categories: /categories 注释去掉（去掉#），如下:</p><pre><code class="hljs dts"><span class="hljs-symbol">menu:</span><span class="hljs-symbol">  home:</span> /<span class="hljs-symbol">  categories:</span> /categories<span class="hljs-symbol">  archives:</span> /archives  <span class="hljs-meta">#tags: /tags</span></code></pre><h3><span id="5-tian-jia-category-map-ying-she">5. 添加category map映射</span><a href="#5-tian-jia-category-map-ying-she" class="header-anchor"></a></h3><p>修改 Hexo 的_configy.yml (不是模板主题里面的 _config.yml)</p><pre><code class="hljs properties"><span class="hljs-comment"># Category &amp; Tag</span><span class="hljs-attr">default_category</span>: <span class="hljs-string">uncategorized</span><span class="hljs-attr">category_map</span>:<span class="hljs-string"></span>  <span class="hljs-attr">WEB</span>: <span class="hljs-string">web</span>  <span class="hljs-attr">MySQL</span>: <span class="hljs-string">mysql</span>  <span class="hljs-meta">中文名称</span>: <span class="hljs-string">english_link_name</span>  <span class="hljs-attr">md</span> <span class="hljs-string">中分类名: web_access_link_name </span><span class="hljs-attr">tag_map</span>:<span class="hljs-string"></span></code></pre><p>举例说明：</p><pre><code class="hljs dos"><span class="hljs-built_in">md</span> 中分类名: web_access_link_name</code></pre><p>“md 中分类名”为md文件中的分类名称，“web_access_link_name ”为访问时的链接地址路径</p><h3><span id="6-tian-jia-xiu-gai-tags">6. 添加修改tags</span><a href="#6-tian-jia-xiu-gai-tags" class="header-anchor"></a></h3><p>同样方法可以添加修改tags，区别是每个文章可以添加多个tag</p><pre><code class="hljs yaml"><span class="hljs-meta">---</span><span class="hljs-attr">title:</span> <span class="hljs-string">题目</span><span class="hljs-attr">date:</span> <span class="hljs-number">2020-08-20 18:47:40</span><span class="hljs-attr">categories:</span> <span class="hljs-string">WEB</span><span class="hljs-attr">tags:</span> [<span class="hljs-string">WEB</span>, <span class="hljs-string">HEXO</span>]<span class="hljs-meta">---</span></code></pre>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hexo使用攻略-Hexo与Typora同时显示图片</title>
    <link href="/2020/08/20/2020-08-20-Hexo_Typora_Show_Picture/"/>
    <url>/2020/08/20/2020-08-20-Hexo_Typora_Show_Picture/</url>
    
    <content type="html"><![CDATA[<p>Hexo默认无法自动处理文章插入本地图片，需要通过扩展插件支持。</p><h3><span id="xiu-gai-hexo-pei-zhi-wen-jian">修改Hexo 配置文件</span><a href="#xiu-gai-hexo-pei-zhi-wen-jian" class="header-anchor"></a></h3><ol><li>修改配置文件 将配置文件_config.yml里面的post_asset_folder:false这个选项设置为true。</li></ol><pre><code class="hljs yaml"><span class="hljs-attr">post_asset_folder:</span> <span class="hljs-literal">true</span></code></pre><h3><span id="an-zhuang-cha-jian">安装插件</span><a href="#an-zhuang-cha-jian" class="header-anchor"></a></h3><ol><li>使用<a href="https://github.com/xcodebuild/hexo-asset-image/">hexo-asset-image插件</a></li></ol><pre><code class="hljs awk">npm install https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/xcodebuild/</span>hexo-asset-image  --save</code></pre><p>说明： 不能使用下面的命令进行安装</p><pre><code class="hljs maxima">npm install hexo-asset-<span class="hljs-built_in">image</span> --<span class="hljs-built_in">save</span></code></pre><p>原因：</p><ul><li><a href="https://www.npmjs.com/package/hexo-asset-image-fork/">npm库中保存的是v1.0.0版本hexo-asset-image</a>,但v1.0.0与Hexo高版本<a href="https://github.com/xcodebuild/hexo-asset-image/issues/51/">不兼容</a>，需要使用<a href="https://github.com/xcodebuild/hexo-asset-image/">v0.0.5版本hexo-asset-image</a>。</li></ul><ol><li>使用<a href="https://github.com/cocowool/hexo-image-link/">hexo-image-link插件</a>（目前2020-08官方推荐）</li></ol><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-image-<span class="hljs-keyword">link</span>  <span class="hljs-comment">--save</span></code></pre><h3><span id="shi-yong">使用</span><a href="#shi-yong" class="header-anchor"></a></h3><ol><li>在md文章中插入图片</li></ol><pre><code class="hljs markdown">![<span class="hljs-string">demo_picture</span>](<span class="hljs-link">2020-08-19-Use_Github_Create_Blog/2020_08_19_commit_new_file.png</span>)</code></pre><ol><li>使用hexo g生成静态网页中的图片路径会自动更新为：</li></ol><pre><code class="hljs routeros">&lt;img <span class="hljs-attribute">alt</span>=<span class="hljs-string">&quot;image&quot;</span> <span class="hljs-attribute">src</span>=<span class="hljs-string">&quot;/2020/08/19/2020-08-19-Use_Github_Create_Blog/2020_08_19_commit_new_file.png&quot;</span>&gt;</code></pre><p>其中文件夹路径是hexo根据new_post_name参数自动生成。</p>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用Github搭建属于自己的博客</title>
    <link href="/2020/08/19/2020-08-19-Use_Github_Create_Blog/"/>
    <url>/2020/08/19/2020-08-19-Use_Github_Create_Blog/</url>
    
    <content type="html"><![CDATA[<p>记录使用 GitHub Pages建立个人主页。框架使用Hexo。</p><h2><span id="an-zhuang-huan-jing">安装环境</span><a href="#an-zhuang-huan-jing" class="header-anchor"></a></h2><ol><li>安装Node.js和配置好Node.js环境。下载链接如下：<a href="https://nodejs.org/en/download/">Node.js下载</a></li></ol><img src="/2020/08/19/2020-08-19-Use_Github_Create_Blog/2020_08_19_nodejs_download.png" class title="image"><p>下载完之后按照默认安装，环境变量会自动配置。安装完成后，打开批处理命令行，成功界面如下：</p><pre><code class="hljs angelscript">C:\Users\ZZ&gt;node -vv12<span class="hljs-number">.17</span><span class="hljs-number">.0</span>C:\Users\ZZ&gt;npm -v<span class="hljs-number">6.14</span><span class="hljs-number">.4</span></code></pre><ol start="2"><li>安装Git和配置好Git环境，安装成功的象征就是在电脑上任何位置鼠标右键能够出现如下两个选择。<img src="/2020/08/19/2020-08-19-Use_Github_Create_Blog/2020_08_19_git_install.png" class title="image"></li></ol><p>在批处理界面可以查询git版本表明安装成功：</p><pre><code class="hljs apache"><span class="hljs-attribute">C</span>:\Users\ZZ&gt;git --version<span class="hljs-attribute">git</span> version <span class="hljs-number">2</span>.<span class="hljs-number">26</span>.<span class="hljs-number">2</span>.windows.<span class="hljs-number">1</span></code></pre><ol start="3"><li>注册并登陆Github。在GitHub新建仓库，仓库名称是 username.github.io<img src="/2020/08/19/2020-08-19-Use_Github_Create_Blog/2020_08_19_create_reposiorty.png" class title="image"></li></ol><p>在建好的项目中创建一个新的文件：readme.md</p><img src="/2020/08/19/2020-08-19-Use_Github_Create_Blog/2020_08_19_create_new_file.png" class title="image"><img src="/2020/08/19/2020-08-19-Use_Github_Create_Blog/2020_08_19_commit_new_file.png" class title="image"><p>通过浏览器访问username.github.io将看到readme.md中的内容</p><img src="/2020/08/19/2020-08-19-Use_Github_Create_Blog/2020_08_19_default_blog.png" class title="image"><ol start="4"><li><p>安装Hexo</p><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span></code></pre></li><li><p>输入 hexo -v 进行查看Hexo安装结果</p><pre><code class="hljs yaml"><span class="hljs-attr">E:</span> <span class="hljs-string">hexo</span> <span class="hljs-string">-v</span><span class="hljs-attr">hexo-cli:</span> <span class="hljs-number">4.2</span><span class="hljs-number">.0</span><span class="hljs-attr">os:</span> <span class="hljs-string">Windows_NT</span> <span class="hljs-number">6.1</span><span class="hljs-number">.7601</span> <span class="hljs-string">win32</span> <span class="hljs-string">x64</span><span class="hljs-attr">node:</span> <span class="hljs-number">12.17</span><span class="hljs-number">.0</span><span class="hljs-attr">v8:</span> <span class="hljs-number">7.8</span><span class="hljs-number">.279</span><span class="hljs-number">.23</span><span class="hljs-string">-node.37</span><span class="hljs-attr">uv:</span> <span class="hljs-number">1.37</span><span class="hljs-number">.0</span><span class="hljs-attr">zlib:</span> <span class="hljs-number">1.2</span><span class="hljs-number">.11</span><span class="hljs-attr">brotli:</span> <span class="hljs-number">1.0</span><span class="hljs-number">.7</span><span class="hljs-attr">ares:</span> <span class="hljs-number">1.16</span><span class="hljs-number">.0</span><span class="hljs-attr">modules:</span> <span class="hljs-number">72</span><span class="hljs-attr">nghttp2:</span> <span class="hljs-number">1.40</span><span class="hljs-number">.0</span><span class="hljs-attr">napi:</span> <span class="hljs-number">6</span><span class="hljs-attr">llhttp:</span> <span class="hljs-number">2.0</span><span class="hljs-number">.4</span><span class="hljs-attr">http_parser:</span> <span class="hljs-number">2.9</span><span class="hljs-number">.3</span><span class="hljs-attr">openssl:</span> <span class="hljs-number">1.1</span><span class="hljs-string">.1g</span><span class="hljs-attr">cldr:</span> <span class="hljs-number">37.0</span><span class="hljs-attr">icu:</span> <span class="hljs-number">67.1</span><span class="hljs-attr">tz:</span> <span class="hljs-string">2019c</span><span class="hljs-attr">unicode:</span> <span class="hljs-number">13.0</span></code></pre></li></ol><p>出现一系列的版本号就是安装成功</p><h2><span id="sheng-cheng-bo-ke">生成博客</span><a href="#sheng-cheng-bo-ke" class="header-anchor"></a></h2><ol start="6"><li>Hexo 初始化。在自己认为合适的地方创建文件夹，然后通过命令行进入到该文件夹下执行初始化命令。<pre><code class="hljs ebnf"><span class="hljs-attribute">hexo init</span></code></pre></li></ol><p>初始化完成后，会有一个默认主题以及一个hello-word的默认文章。</p><ol start="7"><li>生成博客（默认会有hello world的博客）<pre><code class="hljs verilog">hexo <span class="hljs-keyword">generate</span>  <span class="hljs-comment">//可以简写成 hexo g</span></code></pre></li></ol><ol start="8"><li><p>开启服务</p><pre><code class="hljs awk">hexo server  <span class="hljs-regexp">//</span>可以简写成 hexo s</code></pre></li><li><p>打开本地网页进行查看</p><pre><code class="hljs angelscript">localhost:<span class="hljs-number">4000</span></code></pre></li></ol><h2><span id="yuan-cheng-bu-shu">远程部署</span><a href="#yuan-cheng-bu-shu" class="header-anchor"></a></h2><ol start="10"><li><p>安装部署到github.io的依赖:hexo-deployer-git</p><pre><code class="hljs sql">npm <span class="hljs-keyword">install</span> hexo-deployer-git <span class="hljs-comment">--save</span></code></pre></li><li><p>安装好hexo-deployer-git后，修改博客目录配置文件”_config.yml”中的deploy字段：</p><pre><code class="hljs less"><span class="hljs-attribute">deploy</span>:<span class="hljs-attribute">type</span>: git<span class="hljs-attribute">repo</span>: git<span class="hljs-variable">@github</span>.<span class="hljs-attribute">com</span>:zhenzhang20/zhenzhang20.github.io.git #修改成自己的项目地址<span class="hljs-attribute">branch</span>: master<span class="hljs-attribute">message</span>: 自定义提交说明，这个字段可以没有</code></pre></li><li><p>推送到github.io</p><pre><code class="hljs awk">hexo deploy <span class="hljs-regexp">//</span>可以简写成 hexo d</code></pre></li><li><p>访问网站，可以看到和之前本地网页相同内容表明安装成功。</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>Web</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Web</tag>
      
      <tag>Hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
